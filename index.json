[{"content":"多数人到了不惑之年应该都是各种看透看穿，智慧满满了吧。我还是欠缺不少火候，各种“商”大概还是停留在弱冠到水平。不过活到老学到老，比起年轻的自己有进步，应该就是件值得庆幸的事了。最近有些小感悟，记录一下属于自己的进步。\n莫生气。这句话屡见于各种鸡汤里，“大器晚成”的我最近才算是有所领悟。生活或是工作时，一但有人踩到自己的尾巴就心头火起。那股异常血气冲涨胸腔喷上脑子后，言语失控，思维混乱，后面也就一塌糊涂。要做到临危不惧遇险不惊我自认是做不到了：功力不在哪里，不能强求。但是觉察到前方的风暴提前做好准备，倒不是什么很了不起的能力。所以呢，知道某人不好打交道，见面开口之前就可以先提醒自己：莫生气，稳住气场。一旦生气，就乱了阵脚，生气造就输家，赢家全程在握，按部就班，必不会生气。气场稳住了，就比较容易按照自己的节奏和计划来办事，来讨论。\n在关键的点上不退步，同时也不生气：做到这个很重要。记得在一本育儿书上看到过，要温柔的坚定。对孩子要这样，对待其他的人事物也是一样。坚持底线和原则，不能做就是不能做，不可以就是不可以，但是我不动火气，我“温柔”的告诉你：Sorry, but no。\n和自己对话。这个其实我一直都在做，但是大多出于下意识。如果可以主动的有计划的多做做，就更好了。在软件工程里有所谓的rubber\nduck\ndebugging，大致就是在寻找问题根源的时候找个橡皮鸭子或是其他什么物品（或是人）把你遇到的问题以及你的想法说出来。很多时候说着说着新思路就来了，方案就灵光一现了。在面对其他问题的时候，哪怕是没有面对问题的时候，频繁的把自己当成自己的橡皮鸭子，和自己对话，也有很多好处：避免钻牛角尖，及时抒发情绪，以及帮助自己做到前面说的“莫生气”。这种做法也有很多变种：写日记，冥想，和朋友聊天，向主祈祷，我觉得其实都是殊途同归。我准备练习这种能力，做到每天和自己对话不低于10次。如果能做到这样或者更多次，我想我会成为一个更好的自己。\n兴许，就会向真正的不惑更近一些吧。\n","description":"","id":0,"section":"posts","tags":null,"title":"不惑之年有悟","uri":"http://justinyhuang.github.io/posts/some-learnings-at-the-age-of-40/"},{"content":"2022年3月，尘埃渐渐落定后，我终于可以坐下来写写过去的一年发生了什么。\n在Startup做了一年半后，我还是选择离开。直接原因是和空降的Architect在设计上总是不合拍，而事实又证明我的想法是正确的。本来加入小公司就是为了能够有自由且快速的个人发展，可是渐渐发现其实公司需要的只是一个螺丝钉。没有发展的空间，短期内也看不到什么学习的机会。于是我冲动了一把，跳槽了。换到一个full remote的职位，主要吸引我的是用Rust开发嵌入式系统。\n事实又一次证明了冲动是魔鬼……进了新公司才发现是个难得一见的屎坑……首先IT和HR差得无法形容：不给软件工程师开发机器管理员权限，可以申请，但是整个申请过程花了我6个月的时间，没错，6个月。请假系统在我离职前一个月才让我正常登陆……要命的是开发的团队也是一塌糊涂：入职后director因为政治斗争离开公司；全员无论做什么都mob programming，亲自经历5个工程师mob一天完成了一个readme……；需求都不清楚就开始开发，号称agile……\n最后的导火索是Rust被放弃。那就没什么好玩的了。9个月后我又一次跳槽。在这9个月里说服团队放弃低效的mobbing，在离职前力所能及的提交功能改动和架构优化，我觉得我也算是尽力了。剩下的大家各自保重吧。\n新公司入职到现在一个礼拜，中/大厂的逼格明显要高很多，文档流程福利支持基本上没什么好挑剔的，看看一年后会是什么感受。\n小家继续在土豆州成长。夫妻间进入了一个新的阶段，不能说相亲相爱，不能说水火不容，也不能说是室友，感觉是介于三极之间的某种游离状态。我想是因为两人之间有太大的差距，同时因为多年的积累和孩子的捆绑形成沉没成本太高。是一种让人叹息让人难过也让人觉得很有趣的现实关系。也许人生就是这样，自己就这样稀里糊涂的走过来，与其后悔还不如看看将来可以怎样走得更好更远。\n而女儿已然是个小大人。完全形成了自己初级的世界观和个性。对照自己，我只希望她能开心，健康，有自己的想法，做个好人。目前看来算是仍在轨道上。养娃不易，但是时不时孩子给你的那么一点温暖，惊喜或是希望都让人觉得这一切都值得了。\nJCraft处于停滞状态了。没有太多时间出新的作品，只做了一个Kumiko的茶包盒送给了Marvin。兴趣爱好总是与职业发展和家庭琐事抢时间，该说是挣扎还是制衡呢？我也说不清楚。\n过了这一年就是40的大叔了。在这一枝花的年纪，确实感觉看透了很多表面的东西，真是感叹自己成长的速度太慢：这几十年都干嘛去了？！\n如果是按照之前都计划活70年，希望接下来的30年睁大眼睛观察，转动脑袋思考，打开心灵接受。活出精彩来吧！\n","description":"","id":1,"section":"posts","tags":null,"title":"2021 年记","uri":"http://justinyhuang.github.io/posts/2021-nian-ji/"},{"content":"I have been always interested in zero cost abstraction designs and data structures. Recently I just found another great example while checking the Zephyr project: the memory slabs.\nI don\u0026rsquo;t think the Zephyr memory slab is the first/only implementation of such design but since it is what I have been played with, let\u0026rsquo;s just give Zephyr the credit for this beautiful implementation.\nThe idea of a memory slab in Zephyr is simple: a memory pool is defined ahead of time with a known number of fixed size memory chunks linked together. Users can allocate one chunk at a time from the memory pool, use it and give it back to the pool when done. Once allocated, the memory chunk is nothing but an ordinary piece of memory. It is the free chunks that are interesting: they are connected like a linked list.\nOK, linked list is nothing exciting: typically you have a simple struct that has a pointer to the data object, and the also a pointer to the next struct with the same type of data object. They could be singly, or doubly or even multiply linked lists, but that is pretty much it.\nSo what is special to the linked list/memory used in the memory slabs? It costs zero byte to implement the link.\nThe first thought that occurred to me could be No-Way, but after seeing how it is done, it becomes Oh-Of-Course. Just like some of the magic tricks.\nThe key here is the memory slab is not maintaining a linked list of any arbitary data, the item to be linked with is free memory chunks/buffers. And since it is freed memory, no one is using it and nor does the data in it matters.\nAnd you\u0026rsquo;ve probably already guessed: we can implement the linked list in the memory chunks!\nThis is exactly what Zephyr does: A memory slab keeps track of the address of the first memory chunk to allocate (if any), and it saves the address to the next memory chunk in the begining of the first memory chunk, and so on.\nSo instead of\n node - node - node - node - ... | | | | v v v v _______ _______ _______ _______ | buf | | buf | | buf | | buf | |-------| |-------| |-------| |-------| | | | | | | | | |_______| |_______| |_______| |_______|  where buf is a memory buffer, and node is a struct that needs some space to store the address of the buffer and the address of the next node,\nin the memory slab the linked list looks like\n _______ _______ _______ _______ | buf | | buf | | buf | | buf | |-------| |-------| |-------| |-------| | addr-+-+-addr-+-+-addr-+-+-addr-+- ... |_______| |_______| |_______| |_______|  where the addr (of the next freed buffer) is stored inside the current buffer.\nBy borrowing the freed buffers, memory slabs achieves zero cost (in space) implementation of a linked list.\n","description":"","id":2,"section":"posts","tags":null,"title":"Zephyr Memory Slab Design","uri":"http://justinyhuang.github.io/posts/zephyr-memory-slab-design/"},{"content":"Playing with embedded systems for quite a few years, I have gained special love for arrays, enums, structs and, macros.\nThese are basic data structures and language features when used properly, would offer great readability, space/time efficiency\nand, pleasure. A lot of the time with these simple tools one can construct zero-cost abstraction, which still facinates me every now and then.\nBut these would need some serious article to cover (maybe later). This quick note only tells a recent short journey of mine\nwith the (C) macros.\nAt work I implemented a mechanism for system-wide event communication. Being a core component its APIs get called\neverywhere, but there are times when we would like to build without this eventing mechanism, say to save memory when\neventing is not needed.\nOne major API is used to send an event. For the sake of this quick note let\u0026rsquo;s say it is named send(uint32 event). So\nthe requirement here is, for all the send(\u0026hellip;) references, to call the actual send function when eventing is enabled, and to do nothing otherwise.\nThe quickest way would be using #ifdef:\n1 2 3  #ifdef EVENT_ENABLED  send(1); #endif   Apparently the issue here is all the calls to send() will need to have the #ifdef binding.\nIt is not fun to read code with a lot of these preprocessor primitives.\nAnother option will be to move the #ifdef into the send() function:\n1 2 3 4 5 6 7  int send(uint32 event) { #ifdef EVENT_ENABLED  // send the event here #endif  return 0; }   This is better, but the dummy function will not be completely eliminated: At least for the compiler I use (arc-zephyr-elf-gcc 9.2.0), a call to\nthis send() will still result in the assembly as below:\n1 2  mov_s r0,0 j_s [blink]   The caller still jumps to execute this function. 0 is still saved to r0 before return.\nblink is one of the link registers in the ARC processori.\nAnd yes that is with size optimization.\nIt is close enough but I wonder if the initial goal of doing nothing is achievable.\nAnd then it comes to my mind:\n1 2 3 4 5  #ifdef EVENT_ENABLED int send(uint32 event); #else #define send(x) #endif   Putting this in the header and all calls to send() will turn to no-op. Mission complete!\nBut wait, send() is a function that returns a value, so with the no-op trick above\n1  int ret = send(123);   will turn into\n1  int ret = ;   And the compiler won\u0026rsquo;t be happy.\nHow about this?\n1 2 3 4 5  #ifdef EVENT_ENABLED int send(uint32 event); #else #define send(x) 0 #endif   That would satisfy the compiler for calls like int ret = send(123); but when the caller doesn\u0026rsquo;t check the return\nvalue, a call to the function becomes 0;, which triggers a warning from the compiler: \u0026ldquo;statement has no effect\u0026rdquo; (-Wunused-value).\nA common way to workaround this warning is via a type cast:\n1  (void*)0;   but it doesn\u0026rsquo;t work here because that would break the use case of int ret = send(123);.\nAnother way out is to instruct the compiler to ignore this warning. Globally disable this warning is not advisble as it\nwould blind us from other potential mistakes somewhere else, so how about only ignoring the warning for this code?\n1 2 3 4  #pragma GCC diagnostic push #pragma GCC diagnostic ignored \u0026#34;-Wunused-value\u0026#34; \t/* code that requires to ignored the warning */ #pragma GCC diagnostic pop   Note that we cannot directly use the #pragma directives here because that would look like\n1 2 3 4 5 6 7 8 9  #ifdef EVENT_ENABLED int send(uint32 event); #else #define send(x) \\ #pragma GCC diagnostic push \\ #pragma GCC diagnostic ignored \u0026#34;-Wunused-value\u0026#34; \\ 0 \\ #pragma GCC diagnostic pop #endif   and since the preprocessor will only scan once, any preprocessor directives, #pragma in our case, inside a macro will\ngenerate the '#' is not followed by a macro parameter error.\nSo what to do if we want to use pragma inside a marco?\nWell some compilers support the pragma operator, so\n1  _Pragma(\u0026#34;argument\u0026#34;)   is the same as\n1  #pragma argument   Fortunately our compiler support this feature as well. So the below definition does the trick.\n1 2 3 4 5 6 7 8 9  #ifdef EVENT_ENABLED int send(uint32 event); #else #define send(x) \\ _Pragma (\u0026#34;GCC diagnostic push\u0026#34;) \\ _Pragma (\u0026#34;GCC diagnostic ignored \\\u0026#34;-Wunused-value\\\u0026#34;\u0026#34;) \\ 0; \\ _Pragma (\u0026#34;GCC diagnostic pop\u0026#34;) #endif   When EVENT_ENABLED is not set, the call to send() produces zero code.\nOK sounds like we have something working, but there is one side effect: if the caller misses the semicolon when calling the function, the error will not be detected by the compiler when EVENT_ENABLED is not set.\nAnd what about when the compiler doesn\u0026rsquo;t support the _Pragma operator?\nWould there be a different solution that is less dependent to some compiler features, without side effect, and, to some degree, more appealing to the eye?\nI have been so focused, or stuck, in a working macro solution. Now that I step back, there are other tools in the box too!\nTo conclude this post I ended up with the definition below:\n1 2 3 4 5 6  #ifdef EVENT_ENABLED #define SEND(x) send(x) #else inline int dummy() {return 0;} #define send(x) dummy() #endif   So no messy pragma argument, no side effect and no dependency on non-common compiler feature.\nInline function saves the day!\nNow I can sleep without dreaming about the macros and preprocessor primitives, until later :)\n","description":"","id":3,"section":"posts","tags":null,"title":"A Short Journey With Macros","uri":"http://justinyhuang.github.io/posts/a-short-journey-with-macros/"},{"content":"2020终于也过去了。\n过去得有点稀里糊涂。\n首先能够平安度过应该就是福气。\n2020注定是无数人一生的噩梦。我和家人能够平安无事，健健康康的活着，安安稳稳的工作，这已经算是一个成就了。\n因为疫情几乎全年都在家工作，到现在的模式基本上就是全天保持上身工作装，下身居家装。好处是把tech\nroom整理出来作为自己的工作室。比起去公司上班，除了和同事交流和连结硬件不便，其他倒是还挺好，起床整理一下就可以直接工作，饭后睡前如果需要也可以随时加班。对于我这个工作狂来说，算是一个福利。\n在新公司做得……说实话……不温不火。从应用到底层到工具链都接触了，但是都不精通。初创公司的问题也暴露出来：随时处于救火模式，没有长远规划。有点往全栈工程师发展的感觉。可是我觉得最舒服的还是在一个领域慢慢钻研然后做到精通了解，这种方式估计在一段时间内还是不会有机会遇到了。\n不过倒是有个感觉：做嵌入式的方向基本上就是做业务和硬件的衔接胶合，基本不太可能有什么创新或是突破，顶多就是微创新。谁能把工程做到极致：极致效率，极致稳定，极致交付，谁就能在嵌入式成为大牛。\n去年有转方向的机会，错过了。现在转方向机会更小了，我想没有大的变动我应该就是一直戴在嵌入式的圈子里出不去了。人到中年，心态要适当调整一下，要建立合理的期望，不能再海阔天空了。\n本来前年还有开始做一个AMBA for Dummy的写作计划，可是没有了在HP的个人时间空间，要继续下去也是一个不小的挑战。\n我想接下来应该还是会留在现在的公司里，站稳脚跟，让自己的知识体系和工作方式成熟化。下个目标，Architect。\n这个目标几年前就有要立了的，那个时候还刚升expert，踌躇满志。当然现在看来还是太嫩。现在总结出来的是，要升到下一级能打更大的怪，关键需要的是扩容自己的工具箱。The\nsize of your toolbox determines your capability, at least in the embedded industry. 从boot rom到GTK，从security到user\nexperience，从串口通讯到网络协议到视频音频流格式，不仅要知道有什么工具可用，还要知道什么时候用什么工具。有实际经验最好，没有的话好歹也有在纸上谈兵的能力。\n很明显我一直以来没有在注重搭建自己的工具箱，一直都是在随遇而安，有需要的时候才去了解。希望从现在开始还不晚。\nRust一年没碰了，希望能再捡起来不要荒废。关键是要找到一个项目然后做起来。\n家庭方面女儿上K了。大了几岁就和三岁小孩明显不一样了。小人已经显有自己的想法和思维方式。小家伙学习能力也很强，中文水平杠杠的，英文和数学需要提高，而记性和想象力则远超过我。情绪控制还不是很好，但是考虑到做父母的也没好到哪去，就不能苛求了。因为在家办公的原因反倒没有太多时间陪她。老去的时候回顾也许会后悔没有花更多时间陪她吧，可是身在当下的我总是没办法完全抽身。新的一年立个牌坊：每天至少陪女儿半小时。\n父母是真的老了，尴尬的我远在他乡到现在还不能尽孝道，从实际的角度来说，要到女儿上大学以后才可以放心回国去照顾他们了。\n在此之前只能希望上天保佑他们身体健康，等我回去做儿子应该做的事情。\n2020年底和妻子的相处有了一些变化。为了孩子我们试图改善关系。虽然我知道不太可能恢复到原来的状态，但是如果能建立哪怕比较稳定的夫妻关系，我想应该也是好的。实在不行，我只能做好自己带孩子的准备。一路走到这份上，随缘吧。\n几乎就没有什么时间给木工房了，JCraft估计也没什么人记得了。有点可惜但是考虑到也只是业余爱好，还是要给更重要的工作和生活让路的。\n因为女儿要养鱼的一个三分钟热度奇想，我到现在开了两个缸，先后也养了不少的鱼和水草。算是一个新的爱好。这结束这生命之前，多了些有趣的经历。\n另外一个就是开始跑步。因为疫情的原因不能去健身房了，时间太长不运动就会觉得不舒服，于是就试着开始早上在小区里跑步。感觉不错，只需要跑个20分钟精神状态就有明显的改善。可以继续保持下去。\n","description":"","id":4,"section":"posts","tags":null,"title":"2020 年记","uri":"http://justinyhuang.github.io/posts/2020-nian-ji/"},{"content":"Well I am not sure how deep this Deep Dive is, but I will ensure you for a dummy book this chapter will be deep enough.\nTiming Diagram Legends\nIt is very likely the next material you will read after this one is an AMBA spec, where you will see some timing diagram conventions like below\nand it will be helpful to understand now what they actually mean.\nWell clock is straightforward and you don\u0026rsquo;t need to be a hardware guy to understand what it means: a high and a low means one clock cycle. The rising/falling edge might trigger some operations in the hardware that driven by this clock (a.k.a Edge Trigger), some hardware could operate when it is actually high/low (a.k.a Level Trigger).\nHIGH to LOW basically tells what it is: the signal was high and then turns low. Notice the \u0026lsquo;grey\u0026rsquo; area which means there could be some noise / unstable period before it eventually turns low.\nTransient, or the \u0026lsquo;grey\u0026rsquo; area, again, tells that the signal line(s) is in a transient state and not yet get to a steady state.\nHIGH/LOW to HIGH, I bet you can tell me what it means.\nBus stable, means the state of the signal line(s) is steady, one can read from the line(s) and expect valid data.\nBus to high impedance, means the signal line(s) goes into the high impedance, or High-Z state. What it means is that the signal is not driven by any one but instead left open/floating/disconnected. An output pin that connects to this signal will be able to drive it.\nBus change simply means that the data on the bus changes. Again you see some transient state between the two valid data in the bus.\nHi impedance to stable bus means the opposite of Bus to high impedance.\nHow does APB works\nAMBA3 provides the Advanced Peripheral Bus V1.0.\nAPB provides \u0026ldquo;a low-cost interface that is optimized for minimal power consumption and reduced interface complexity\u0026rdquo; (from AMBA 3 APB Protocol Specification).\nSo we know, APB focuses on low power, and simple interface. With this in mind it would not be difficult to understand:\n APB is for peripherals that are low-bandwidth and do not require high performance, which means transactions via APB will be slow and small-size.  All signal transitions are only related to the rising edge of the clock to enable the integration of APB peripherals easily into any design flow. Every transfer takes at least two cycles.\nThe APB can interface with the AMBA Advanced High-performance Bus Lite (AHB-Lite) and AMBA Advanced Extensible Interface (AXI). You can use it to provide access to the programmable control registers of peripheral devices.\nLet\u0026rsquo;s now look closer into how data is sent and received via APB:\n Writes. APB has two types of writes: write-with-no-wait and write-with-wait  The timing diagram above shows the write-with-no-wait:\nThe device initiates the write sends the data to an address, and this is what happens on the bus:\n PADDR, the address where the data goes to, becomes available PWDATA, the data itself, becomes available PWRITE and PSEL are set to high, to indicate this is a write.\nOK setting PWRITE is obvious, but what is PSEL doing here? Well APB is a 1-master-n-slave communication model, which means the APB master device sets up the bus communication and also initiates all the APB transactions. The APB slaves only respond to the requests from the master. The APB master has PSEL0, PSEL1 \u0026hellip; PSELx pins connected to its slave_0, slave_1, \u0026hellip; and slave_x. When the Master sends a request to a slave_n, it sets the pin, PSELn, high, so that slave_n knows there is a request from the master and should respond. A slave device will have only one PSEL pin, and as you could guess, PSEL means PinSELect.  All the three above occur almost at the same time: at the rising edge of the clock cycle T1. And T1 is called the Setup Phase.\nAfter the Setup Phase in the next clock cycle PENABLE will be set at the rising edge of T2, to indicate the beginning of the Access Phase. In the Access Phase the address, data and control signals are guaranteed to be stable and valid for the target of the write to receive the data. After the Access Phase the write operation is complete, which takes 2 clock cycles.\nThe timing diagram below shows the write-with-wait:\nThe Setup Phase is the same as the no-wait version. What makes the wait version different is the introduction of PREADY. If the Access Phase needs to be extended, PREADY can be driven low and the other 5 signals/buses will remain unchanged for additional clock cycles, until PREADY becomes high again.\n Reads. Similarly, we have read-with-no-wait and read-with-wait.\n  The read-with-no-wait timing diagram is shown as above. It is very similar to that of write-with-no-wait, except that PWRITE needs to be driven low to indicate this is a read. There is the first clock cycle that is the Setup Phase, and the second clock cycle being the Access Phase. PRDATA will be available in the Access Phase since this is a read request.\nYou can guess now read-with-wait will use the same approach as write-with-wait, and yes with PREADY the read can be extended for more clock cycles, as shown in the timing diagram below.\nThe read-with-no-wait timing diagram is shown as above. It is very similar to that of write-with-no-wait, except that PWRITE needs to be driven low to indicate this is a read. There is the first clock cycle that is the Setup Phase, and the second clock cycle being the Access Phase. PRDATA will be available in the Access Phase since this is a read request.\nYou can guess now read-with-wait will use the same approach as write-with-wait, and yes with PREADY the read can be extended for more clock cycles, as shown in the timing diagram below\nAnd guess what? You can now run out of your cube and shout \u0026ldquo;I know how APB works!\u0026rdquo;\nCongratulations. We are moving to the next protocol and I hope to see you there.\n","description":"","id":5,"section":"posts","tags":null,"title":"Amba for Dummies Amba 3 Deep Dive APB","uri":"http://justinyhuang.github.io/posts/amba-for-dummies-amba-3-deep-dive-apb/"},{"content":"I don\u0026rsquo;t know about you, but I am, at least at the time of writing, a so-called firmware engineer who knows a little bit of C/C++/Python/Rust, who struggles with keeping some vague and superficial, out-of-date and sometimes incorrect understanding about the hardware platform that runs my code.\nWhenever I talked to the hardware folks, words, especially acronyms, from their mouths appear to be so fancy and yet esoteric that so many times I left the conversation with glassy eyes and blank mind.\nAnd then for several times I decided to invest my time into learning the hardware side of the embedded world, yet every time my ambitions became frustrations when all my search results point to lengthy and tedious protocol specifications or user manuals. The hardware engineers seem to live in another parallel universe where we as the programmers can never reach.\nLife should not be like that. This is the 21st century and one can buy a yellowish little book of XXX for Dummies for basically everything. When you can get a book called Casino Gambling For Dummies, I seriously think we should have a Dummies book for those magical hardware technologies, like AMBA. In the end, for people like us so smart that can actually debug the very code we wrote a year ago, learning some hardware stuff is not that difficult, right?\nRight?\nThis series, hopefully can become a little Dummies book later, intents to build a bridge from the universe that dummies and us live in, to the higher-dimensional space where the hardware designers keep their secrets. Once you know enough to not be a dummy, you should proudly throw this little book far away and start tasting the goodies of the specs from ARM.\n","description":"","id":6,"section":"posts","tags":null,"title":"Amba for Dummies : Preface","uri":"http://justinyhuang.github.io/posts/amba-for-dummies-preface/"},{"content":"This is a new personal project of mine. I build this dummy book with my personal notes when learning AMBA.\nSo initially it will be a list of reading notes / memos. The plan is to first prepare the building blocks, polish them, and then put them in places the way a book is produced.\nBelow is the currently up-to-date road map of understanding the AMBA:\nPreface\n Top Level View of AMBA  Generations and History AMBA protocols   AMBA 3 Deep Dive  How does APB works How does AHB works How does AXI3 works   AMBA 4 Deep Dive  How is APB v2.0 different than APB v1.0 How does ACE works How is AXI4 different than AXI3 What about AXI4-Lite and AXI4-Stream   AMBA 5 Deep Dive  How does CHI works   The Not So Dummy Resources  This post will be updated with future updates and new post of this Dummies series.\n","description":"","id":7,"section":"posts","tags":null,"title":"Amba for Dummies : Intro","uri":"http://justinyhuang.github.io/posts/amba-for-dummies-intro/"},{"content":"This year I become a 13-year software engineer and a 5-year woodworker (no, the latter is not certified). And now I believe there are reasons why I love writing code and making wood dust: they are so much alike!\nBoth software engineering and woodworking require well planning ahead and careful execution\nOne will need to think through the code s/he is going to write:\n what is the requirement? what is the expected behavior? how would you test it? what could be the exceptions need taking care of? when is it expected to be delivered?  In your maker space the rules are the same:\n what is the cut list of this project? what tools would you need? should you cut out the rough shape, or should you work on some details first?  **Both software programming and wood crafting require huge determination and patience **\nUnless you are genius or just writing hello-world, your city of Rome is not going to be built in one day.\nFrom design proposal to get the team\u0026rsquo;s buy-in for the plan, from early prototying to putting as many test cases as possible, from tying the first line of code to saving the final version of the documentation, in many cases it would be for sure a long journey.\nWorking with wood is no different. You would not expect to have a single path through the planner and get the lumber to the desired thickness. The dream is to have a full 3D CNC machine, press the big fat button and then enjoy your coffee, while the reality is you will need to run between the tablesaw, bandsaw and maybe the other two working tables to get the job done. Not to mention the wait for the wood to cure, for the glue to dry, for the surface to eventually become silky smooth after a 30-min hand sanding.\n**Both typing and routing require superior focus and accuracy **\nNot enough attention can be paid when writing code, or programming will really become the art of putting in bugs.\nThe same applies to holding a router or a saw: 1/64 inch more being cut off the work piece and you would probably need to re-do the project.\nBoth programmer and woodworker need tools, a lot of tools\nPart of the fun being a programmer is to get yourself the best keyboard, the biggest monitor, the most powerful workstation, deep customed editor with linting, auto-ai-completion, fuzzy-finding, fancy status bar and icon, and this list goes on and on. And then one day you start building your own handy scripts, your own log parsing engine, your dark power profiler/debugger/tracer\u0026hellip;\nNot surprisingly woodworkers have the opportunity to enjoy the same: you get all the beefy power tools, and you will one day need hand tools from Japan, and yes you are still waring the T-shirt says you need more tools. Of course you will build your own jigs because no one else knows your need better and no one else can out-smart you, the wookworking king of your own shop.\nBoth writing software and cutting wood bring a high level of satisfaction\nI will never forget the moments I fixed some bad-ass defects or when a tool that I wrote runs perfectly.\nIt is not something money can buy. It is like after you endure a one-hour good workout in the gym, and then finally get to take a shower.\nFor every piece of work completed, I take a picture and stick it to the wall of my workshop.\nWhen the last layer of finish dries out and the complete piece of wood sits in my hand, I feel like hugging my daughter for the first time.\nI can keep writing for another hour or two, but I guess I\u0026rsquo;d better get back to write code so that I can have more time collecting wood dust later.\n","description":"","id":8,"section":"posts","tags":null,"title":"Software Engineering v.s Workwooking","uri":"http://justinyhuang.github.io/posts/software-engineering-vs-workwooking/"},{"content":"/* the composition of the object, Me, is listed as below. * at the time of writing the values are valid in Boise ID. * when you read this some might be obsolete: use at your own risk. */ volatile double FirmwareEngineerAtDay = 0.35; volatile double DadAtNight = 0.35; #define Woodworker (1 - FirmwareEngineerAtDay - DadAtNight) * 0.8 #define TechnologyTranslater (1 - FirmwareEngineerAtDay - DadAtNight) * 0.1 #define UnknownElements (1 - FirmwareEngineerAtDay - DadAtNight - Woodworker - TechnologyTranslater)  工程师，而立已婚有娃，宅叔一枚，着迷于所有看起来很酷很性感的东西。\n","description":"","id":9,"section":"","tags":null,"title":"About","uri":"http://justinyhuang.github.io/about/"},{"content":"2019年最后一个晚上，趴在我自己的床上，用Android版的Notion，写下这篇年记。这已经说明和往年有挺大的不一样了吧。\n这一年可算是超越往年更加忙碌的一年。大部分是因为换工作。我为HP服务了12年，HP给了我第一份工作，第一次赴美，第一次被裁，移民定居美国，结识很多可谓技术人品兼修的大拿的机会。因为不满公司高层的战略以及执行，因为不满中层架构师用政治领导技术，我还是选择了离开这家公司。希望HP后面走好也希望我能从此独立在江湖闯出自己的名号(写这句明显有点虚)。\n骑驴找马期间面试了好几家公司，几乎清一水的初创公司，从某个角度反映出美国的经济还是总体向上的。西到西雅图东至波士顿，on site虽累但也还是很享受身临其境的对话和浸入式地了解这些公司。有很多东西不on site还真看不出来。另外在航班上完全隔离的思考空间和安静的看完一部电影的体验也是很宝贵的。\n集中面试暴露出我白板面试的短板，offline的assignment基本没被刷过，而白板就没表现好过。实在是差到怀疑人生。下次找工作，不实实在在刷题演习个把月，切切不能轻易出动。\n大篇幅写找工作，因为我还是很乐在其中。最后进入一家本地的初创公司做边缘计算，希望这只猪能飞起来。明年争取在新公司站稳脚跟。\n女儿已经快5岁了。说话做事俨然一副成人样，很有意思。妈妈对她的影响不小，我也能在她身上看到一些我的影子。她的小提琴学习了9个月在台上的表演已经处于4岁儿童里面拔尖的了，明年又准备学钢琴。心里幼稚的想她要是发展成个童星啥的我就可以提前退休数钱了……\n健身基本上每周都还能坚持，只是奇怪的是今年体检的各项指标并没有改善，有点小打击。但是我自认为已经可以完成至少一个单手俯卧撑了。有机会一定要拍个视频显摆一下。明年争取八块腹肌外加手臂增粗。\n西班牙语今年零进展。有一个本地的西语小组，但是只是参加了一次就没有继续。依然没有找到适合我的学习方法。用不起来啊语言就学不进去。\n木工坊基本停滞了。主要是没有时间以及工作的变化。毕竟，这也只是个爱好。不能把主业给废了。有时间再玩不迟。\n这一年做人和心态有了一些主动的变化:不再那么被动或是老好人了。遇事先要有自己的想法。别人的看法建议可以听但是不必照办。自己做的选择，对了就证明了自己，错了也好歹是自己的选择，从错中学习就是；听从别人，对了也是别人的意见下次遇到同样的问题还要靠别人，错了更惨，谁叫你当初自己没主见。内化了这个想法，我更加容易说不了，更加自信了，更加不怕吵架了，重要的是，人生更有趣了。半身入土了才有这样的感悟，庆幸的同时也略感可悲。\n2019，对得起自己。\n让2020来得更猛烈些吧！\n","description":"","id":10,"section":"posts","tags":null,"title":"2019 年记","uri":"http://justinyhuang.github.io/posts/2019-nian-ji/"},{"content":"一年就这样过去了。\n新年前夜外面有人点烟火放炮仗，早上起来看新闻说州府照例吊巨型土豆跨年，然后还有很多人Google那个土豆是不是真的。\n一片欢呼雀跃的喜庆。\n我不喜欢这些节日，无非都是人为标记出来的暗示：日历上这些都是值得庆祝的日子哦，有得庆祝就庆祝没得庆祝也要寻得些愿景来庆祝哦。\n就好像过了12月31日第二天的太阳和以往有什么不一样似的，可笑。\n不过想到我现在也在写总结，好像也就没什么可以嘲笑他人的资格了。\n2018还是有些值得纪念的事件：\n拿到绿卡算是一件。在动荡的时局里，也不知道这是不是件好事。但至少不用担心没有工作就要回家种红薯。也给了2013登陆的我一个交代。\n遇见了Rust，用它重写了公司内部一个解码工具，效率提高20倍以上。算是作为码农2018最值得一提的事。Rust不像Python，上手没那么容易。但是我很是喜欢它的设计思想，对于嵌入式系统的开发，假以时日，会带来划时代的改变，毕竟C已经是上世纪中叶的化石了。\n坚持锻炼了一年，体检的时候各个指数都有了明显的好转迹象。全年各种流行疾病季轻松度过，我想应该和体质提高有关系。遗憾的是2018没有能够获得单手俯卧撑技。\n女儿上学了。她在学校还是需要更好的融入，英语毕竟不是她的母语。不过这也没什么好担心的，过个两年也就好了。\n担当expert第一年，推的几个项目总体算成功。但是只要涉及到人际间协调和沟通到问题，我还是略显吃力。\n想了一会，好像没有什么了。回头看去年的年记，除了西班牙语，其他的都算按计划完成。\n于是该给2019写些什么了。接下来的一年：\n计划深入了解Rust的使用。至少写一个定制的哈希实现替换Rust std提供的HashMap，目标是把重写后解码器的解码效率再提高10%。\n写一篇关于Rust的总结。\n继续保持锻炼。得到单手俯卧撑技能。\n每天5点起床。\n找到一个面对面用西班牙语交流的朋友。每周30分钟交谈。\n每周固定时间和女儿单独早餐或者晚饭。\n每周五下午固定木工时间。\n开张JCraft，如果收入超过2K就进一台Glowforge。\n一睁眼一闭眼就是一天，雪一融叶一落就是一年。70年已过半，还是得抓紧时间不留遗憾才是。\n","description":"","id":11,"section":"posts","tags":null,"title":"2018年记","uri":"http://justinyhuang.github.io/posts/2018nian-ji/"},{"content":"2017年12月底，家里除了我所有人都已经睡着了，客厅里圣诞树的灯还亮着。把冰箱里女儿没喝完的牛奶干完，我想起是时候记录一下即将逝去的这一年了。\n人到中年开始越来越多的思考活着的意义。\n我大概还想再活35年，如果运气不错，活到70岁应该自己都厌烦自己了。如果还是待在美国，我可以去隔壁的Oregon州申请安乐死，从容且有尊严的选择为自己的生命画上句号。\n所以说对于死我是已经做好计划的了，当然有什么意外的话这个计划就泡汤了，这个不去多虑。剩下的就是活着的时候的事情。小时候很多宏图大志，人生按照我的计划过了一半，几乎没有什么成就，所有中年危机的描述放在我身上都完全符合。好吧浪费了半辈子。于是更需要好好规划剩下的1/2生命了。\n今年电影院里看的唯一一部电影是《Coco》，故事里面有阴阳两界，人死后就到阴间，在那里能“活”多久取决于阳世还有没有人记得你。如果阳世再没有人记得，你便也在阴间“死”去。下一站是哪里就真的谁都不知道了。话说作为基督徒是不应该相信这个的，但是我觉得用这个来激励自己活好下半辈子还是有益的：那就是人生在世需要留下些什么，以让后人惦记。最后我能留下什么，现在还不清楚，目前的工作应该是留不下什么东西，另外能作为话题的木工也还没到流传百年的水平。这个问题我会继续思考和探索，希望不要带进坟墓。\n除了留下痕迹，活在世间应该还要尝试自己想做的事，和若干年前看过的“人生如游戏，要尽可能玩遍所有的隐藏关卡”类似。为了让最后一口气成为如释重负欣然放手的呼气而不是无比悔恨牢骚满腹的叹气，就要自己创建并维护好一份清单，上面列好了自己想要做的事情。清单可以增补，但不能删减。然后就是努力的去完成上面所有的任务。方能不留遗憾。写完这篇年记我就去列一个，然后用35年的时间去完成。\n以上总结，基本上就是要做好自己该做的事，做完自己想做的事吧。\n好了，天马行空了一会，还是回到我年记的调调，简单总结一下吧。\n工作\n现在Video基本上就是我一个人扛了。工作起来还算顺手，但是对原理和很多底层的东西还没有领悟透，要真正做到这个领域的专家，这一关是必须要过的。时限两年。\n低端的Debug\nTooling也是我lead了。这里面有很多非技术方面的挑战，诸如如何协调各部门平台之间的需求，如何推动跨平台跨部门的工具策略，如何和不同的人不同的团队打交道等，都是作为一般软件工程师的我并不擅长的。按照我的习惯，要做到这一层必须是要自己对更广的领域有所涉猎才有信心和不同的团队交流。尤其对ASIC的设计实现知之甚少，是我目前的一大软肋。能够把这一脉打通，我想我会在技术这一条路走得更远。接下来要有目标，基本了解ASIC设计的原理。时限3年。\n这几年尤其是今年，表现上还算突出。终于登上了Expert的台阶。哪怕是自己写给自己看的年记，也要感谢各位前辈和上级的提携。5年后，能否再上一个台阶呢？加油干了。\nHobby\n在车库玩木头已经有几年，越发不可收拾。今年基本都是在做各种键盘盒子。大大小小应该有二三十件。其中的Transformer Case基本上也是“专利”了。还是小有成就感。接下来应该还是会往木工与现代化设备的方向发展。木工应该与时俱进，作品应该有时代感和现代的线条感。\n合适的时候会添加一个18寸的bandsaw，以及进一步的除尘设备。钱已经存好了。对现在工坊的发展模式非常满意。\n作为圣诞礼物给Marvin做了一个纸巾盒，这是到目前为止我做过最复杂的设计和制作，虽然有很多缺陷，但是还算合格。看到他们收到礼物时的惊叹，花出去的20几个小时就值了。\n西班牙语\n坚持不间断每天花几分钟学习西班牙语已经有161天了。但是觉得自己陷入了一个陷阱：词汇量的增加显著停滞，对复杂时态和句式的了解几乎没有，听力也没有什么显著的提高。上周曾经试着听Duolingo的Podcast，但是是给中级水平的，除了偶尔几个单词完全听不懂。要找到合适的听力和阅读材料才能让自己的西班牙语上一个台阶。\n为人父\n女儿已经两岁半了。已经懂得很多事情也很听话懂事。很多时候都庆幸能拥有这样一个听话可爱的女儿，同时也感叹自己没有做好好父亲的角色。平时基本就是下班后和她玩，然后给她洗澡刷牙，让她睡觉。会尽量让她学习新的东西，但是耐心还是不够。对她的关心也不足。所以基本上她还是最喜欢她的妈妈。圣诞放假的时候全天候陪着她，就有点开始粘我。估计上班之后又忘了我对她的好，呵呵。\n已经在为她以后的教育和生活需要存钱。我想这个是我作为人父需要做好的基本准备之一。希望能够在她完全独立之前给她需要的所有支持。\n婚姻\n不在年记里写婚姻已经有好几年了。因为说实话如果不是因为女儿这段婚姻兴许都不复存在了。身边好多同事朋友都离婚了。然而对于我现实就是现实，不是所有的事情都可以任由性子来。换个角度看，或许婚姻这条路总要路过这样的坎坷，或许10年后回头看会庆幸自己没有选择逃离。既然有责任要担当，既然有理由去坚持，就继续扮演好自己都角色吧。好人难做，而唯独难做才让它更有价值。\n写完年记已经夜半。洗完碗，就可以去睡了。\n","description":"","id":12,"section":"posts","tags":null,"title":"2017  年记","uri":"http://justinyhuang.github.io/posts/2017-summary/"},{"content":"这个时候再来写去年的年记，是有很多晚……\n基本上已经不记得去年发生了具体的事情。为了年记系列的连续性，却还是要硬生生挤些出来的。\n2016是女儿满一岁的年份，给她过了第一个生日，抓了阄（她本来是要抓键盘的，但是还是因为观众的不镇定被影响，最后什么也没拿）。看着孩子慢慢长大，见证她每一个新的进步和成长，确实是充满喜悦和感动的。而同时为人父的责任压力以及为了孩子付出大量的时间和经历，也说实话有点负荷不来。2016的爸爸满嘴的酸甜苦辣。\n2016工作上没有什么质的飞跃，除了video，自己又开始负责debug\ntooling的领域。这是Marvin在HP的最后一年，他把这个重任交给了我，真不知道会不会让他失望。总之这个老领导一路带我走到这里，是时候自己独立飞翔了。希望明年有可圈可点的地方。\n到2016年底已经有两年没有去教堂了。虽然偶尔有找网上的录像来凝听主的福音，但还是可以感觉自己和主的联系愈渐薄弱。女儿长大一些后，应该是要带上她一起去教堂的。\n西班牙语的学习没有很大的起色，5年掌握español的计划估计是不能按时完成了。2017要慢慢捡起来。\n木工方面，已经是我消磨剩余时间的第一活动了。结合对机械键盘的爱好，JCraft开张，专门做客制化的木制品。如今在圈子里有颇有点小名气。投资了一部CNC，成本也已经收回来了。我在工作中的疲累和在生活中的失意都可以让tablesaw和router全部化作一袋又一袋的木屑。那种自己的作品被网友惊叹“i am in love!!”的感觉，是我的精神毒品。\n好了。就先写这些。2017，敬请期待。\n","description":"","id":13,"section":"posts","tags":null,"title":"2016过期年记","uri":"http://justinyhuang.github.io/posts/2016guo-qi-nian-ji/"},{"content":"   ","description":"","id":14,"section":"posts","tags":null,"title":"A Custom Made Bluetooth Mechanical Keyboard","uri":"http://justinyhuang.github.io/posts/a-custom-made-bluetooth-mechanical-keyboard/"},{"content":"窗外头皮似的雪下了有一阵子了，门前水泥地上的斑斑积雪还只是像牛皮癣病人的皮肤一样，没有一脚踩一个深坑的气势。\n2015年带来了我的女儿，小家伙十分可爱，喜欢笑，爱蹬腿；镜头感十足，只要有镜头对着她马上影后上身；大便的时候总是铆足劲，小脸通红，发出很用力的声音；小手总是做松鼠状，手指还不时张开收拢，像在谈钢琴，也像是在玩什么很柔软的东西；喜欢探索新环境，热衷研究陌生人，如果旁边有人聊天，自己观察一段时间之后就会很自觉的加入，哇哇哇的表达自己的意见，同时还不忘对每一个人笑，eye contact很重要。在我16年生日的那天，她静静的忽然第一次说出“把拔”来，吐字清楚，眼神游离，顿时让我全身酥软，舒服得不行。\n2014年制定了一些计划，回头看看没有完成得很好。西班牙语基本没有进展，词汇量原地踏步；一个月一篇日志的目标也没有实现，还差几篇。\n自认为丈夫和爸爸的角色扮演得还可以，儿子的部分不及格。接下来的春节会回家几周，希望可以补多少就补多少。父亲已经退休了，但仍在他所热爱的行业继续发挥余热。无论是为人处事还是敬业爱岗，他永远是我的榜样。\n工作方面，Video理解得还可以，做的几个产品没什么大问题，但是和人打交道的部分还缺火候，要继续修炼和各色人等协作的能力。今年准备对Video进行重构，希望顺利。和ASIC的工程师打交道不少，应该是深入学习嵌入式系统的好机会。2015年没有很好的把握住。希望2016对memory以及arbitration的理解有所进步。\n木工这部分算是超额完成指标。不仅完成了三件shop\ncabinet，还做了好几件礼物圣诞送给邻居朋友。反响不错，可以继续发展。目前玩木头已经成为几乎唯一可以让我放松且感愉快的活动。有时间写一下感受。\n2015年偶尔沾上了机械键盘，起因为自己从QWERTY转换到了Colemak。跳进GeekHack和Reddit上到MechanicalKeyboards之后顿时不可自拔。彻底爱上定制化机械键盘的我花费了大量的人力物力完成了属于自己的45%键盘，原木封装，蓝牙连接，键位完全可编程，用起来怎一个爽字了得。因此产生的花费也不小，一直在幻想着可以在以后卖键盘木盒子把投资收回来，不知道这是不是只能是幻想了。\n即将迎来在B村的第三年。\n我能否实现去年没有实现对西班牙语词汇量翻番的目标？我能否在工作上划属为自己的领域上有所建树？我能否初步打造自己的木工品牌？我能否让每天等待自己回家的妻女过上更好的生活？我能否让远在国内小岛的父母老有所依？\n希望一年后我能微笑面对这些问题胸有成竹。\n","description":"","id":15,"section":"posts","tags":null,"title":"2015","uri":"http://justinyhuang.github.io/posts/2015/"},{"content":"After I switched from QWERTY to Colemak, getting a keyboard for this new layout becomes something I\u0026rsquo;ve been thinking about more often. At the moment I was using HHKB and a Filco TKL, which are both nice keyboards, but it bothers me that the keyboards stay in QWERTY while I have already moved on.\nThere are some software solutions available to translate the keyboard into a Colemak keyboard, like the hotkey macros, and I have to say it works well. However I hate the fact that you have to start extra applications to achieve something that should be much simpler.\nThen I start the journey of getting a new keyboard\u0026hellip;\nAt first I learnt that there are alternative controllers available for both keyboards of mine. With an alternative controller one can program the keys to whatever keys, and macro\u0026rsquo;s can be implemented so that one key press event can be come a series of key-press. With the concept of layers, a physical key in different layers can be different keys.\nWhat a wonderful solution! I thought. And then I get the alternative controllers from Hasu and and bpiphany in GeekHack.\nThe controllers work great. Both of my keyboards turn to Colemak layout and are equiped with many more features with the macro and the layers. But soon enough I realize I need something more\u0026hellip;\nThe print on the keys is not right: it still tells the keyboard speaks QWERTY though it has a Colemak heart.\nWith full programmability the keyboards are now too big: the arrow keys, pgdn/pgup/home/end/insert/delete/sclk/pause/scrlk and all the Fn keys and number keys becomes unnecessary, and BTW why are all the space key so fat and ugly?\nAll these thoughts leads me into seeking uncommon keyboards that are not \u0026ldquo;off-the-shelf\u0026rdquo;.\nNot until then have I realized there is a good size of people in this world who are so crazy/focus/creative on customized keyboards. There are different designs on 60%, 59%, 45%, 40% keyboards. There are options available for stagged keyboards and ortholinear keyboards. There are so many kinds of switches for all levels of tactile feedback and sounds.\nNot to mention you have endless choice of keycap designs in several profiles.\nBoy, I\u0026rsquo;ve been so bored on my keyboard for so long time!\nI digged into Reddit and GeekHack for my dream keyboard and I thought I found one: the JD40, a 40% fully programable stagged keyboard.\n","description":"","id":16,"section":"posts","tags":null,"title":"A Journey of Making Customized Keyboard","uri":"http://justinyhuang.github.io/posts/a-journey-of-making-customized-keyboard/"},{"content":"Eventually I made the move.\nI type most of the time when I work. My left hand hurts from time to time as one of its nurves was cut in an surgery accident when I was a kid, and my left hand could not type as comfortably and fast as my right one. In my 20+ years of playing with keyboards, the pain keeps bothering me. Well I hope not any more, or not as often, after this switch.\nLast month when I was browsing a mechanical keyboard forum, I saw people talking about alternative keyboard layouts, Dvorak, Colemak, Walkman etc. It\u0026rsquo;s not my first time hearing about these layouts: they tried to replace QWERTY by arranging the most used keys in the home row, so people can type faster. Not interested, I was. With QWERTY I type at about 80 WPM, good enough for coding and email. However, I then came across this article showing a wonderful heat distribution of QWERTY keyboard and a Colemak one:\nThe comparison clearly shows the most frequently pressed keys in QWERTY are distributed across the rows, while in Colemak they are all in the home row. There is another research claims that Colemak puts right hand into more use: perfect for my case!\nThen I decide it is time for me to switch.\nIt is always the first step that costs. Ih the first few days, I felt nothing but frustration: it seems like the fingers don\u0026rsquo;t belong to me anymore. After 20 years, I don\u0026rsquo;t even know how to type! In the first week I practised everyday, yet I was typing at about 35 WPM. I used the \u0026lsquo;cold turkey\u0026rsquo; method, and therefore my work suffered in the slow typing as well.\nThe second week I thought about giving up, mostly because I could not bear the impact to my work. Especially when coding with a colleague behind me, I had to explain I was in the transition to a new keyboard layout blah blah. Mine! I screwed myself! But soon after I realize there is no way back: because I practiced a lot, part of my muscle memory has adapted the Colemak layout. So when I tried to switch back to QWERTY, I could not type either! I will never forget the feeling: the nerves connecting my brain and the fingers are broken. I can see the fingers, but they are not at my command\u0026hellip;\nWell this might be just a good thing. I quickly decided to continue the journey to Colemak. And about 1 month later, my average speed is above 50 WPM, sometimes over 65 WPM. Not bad for fhe first month! And at this speed I can pretty much get my work going without much delay.\nAnd I have to say Colemak really make typing a much more enjoyable experience: the layout is optimized to achieve the \u0026lsquo;flow\u0026rsquo; of typing. Typing many words in Colemak feels like playing the piano and your fingers are just following the flow of keys. I was good enough in QWERTY but I never enjoy typing with the layout. With Colemak I feel the comfort and fun while typing. This is amazing and you have to experience it yourself to tell. Now I understand the comment by most of the users coming from QWERTY to Colemak: I will never go back.\nNow I am confident that given some time, I will be able to come back to the speed I had with QWERTY, or maybe even faster. But spped is not the number 1 factor in this transition. I am more comfortable with working on a Colemak keyboard for a long time.\nOne note for those who would also like to make the switch: get yourself a programmable keyboard, likely and preferrably, a mechanical keyboard. With the keyboard you will be able to program it to the Colemak layout. And with the keyboard you will not worry if a PC or a laptop has install the software to support Colemak. I find it very helpful and besides, a mechanical keyboard is much better than those $5 membrane ones!\nIf you work more than 4 hours with a keyboard, you deserve Colemak and a good mechanical keyboard. =)\n","description":"","id":17,"section":"posts","tags":null,"title":"From QWERTY to Colemak","uri":"http://justinyhuang.github.io/posts/from-qwerty-to-colemak/"},{"content":"Possibly for anyone you ask what is the best known social network for job and talent hunting, LinkedIn would be the answer. I used to be an active LinkedIn user, not any more. Because LinkedIn has become a False Land, where people lie often.\nA firmware engineer, who once quickly resolved a defect: the defect was found and reported because an assert was hit when an unexpected error occurred. Instead of identifying the root cause, he removed the assert. When I came across his LinkedIn page, I was impressed with his nicely built resume and his title: Senior Firmware Engineer.\nThere is another engineer. The comment to him from one of his peers is: he doesn\u0026rsquo;t know how to code.\nYet on the LinkedIn page the experience he says:\n  he leads a team delivering products on time: while he only sends out defect reports every day, asking the engineers about the status of their work. The products were led by technical leads and product managers.\n  he leads many low-level driver development: while he is the only developer developing the drivers. There is no\nleadership in a one-man team.\n  Some good interview would tell if one qualifies his title or an experience is real. But these watered resumes mixed in others makes it hard and more expensive for companies to find the real fit talents. It also blurs the market value of quality candidates, as a simple search would depict a false image of more than actually available talents.\nLack of qualification has made LinkedIn a perfect place to bloat your profesional experience. It doesn\u0026rsquo;t cost a dime to make your resume looks better than it actually is. Maybe in the near future LinkedIn would change its name to LiedIn and become one of the well known False Lands.\n","description":"","id":18,"section":"posts","tags":null,"title":"LinkedIn, the False Land","uri":"http://justinyhuang.github.io/posts/linkedin-the-false-land/"},{"content":"自从年初总结了自己最大的缺点后，我就不时在想：如何才能做到善于发现问题呢？\n用了半年大时间，我想我找到了两个方法：一是不要急着应对；二是去拥抱“争吵”。\n第一个方法还没有想透，这里就先讲讲为何以及如何拥抱“争吵”。\n这里的“争吵”不一定是要吵起来。“争吵”意味着有分歧。我以往的做法是尽量避免“争吵”，以和为贵，哪怕牺牲自己的利益或是便利。这样做的最终结果很可能是潜在的分歧没有得到妥善解决，最后累积爆发呈现为更加不可收拾的后果。\n房子装修的时候，很早就听说再好的夫妻都能因为装修的细节吵得反目。于是就基本上都听老婆的。尤其是厨房，完全放手让她按照自己的想法做：理由看起来没有问题，厨房基本上都是她用。当她买很贵当冰箱时，我觉得没有必要去參和，避免争吵；当她决定餐厅和厨房都用木地板时，我觉得没有必要參和，避免争吵；当她要买纯白的圆桌做饭桌时，我想也没想，如果反对的话自己还要找另外一张桌子并说服她，何必为这事争吵呢？\n分歧被表面的和谐掩盖，但是总有一天会像岩浆一样找到突破口喷射出来。搬家一年后慢慢发现：原来被销售吹到天上去的冰箱除了大一些好看一些以外，也不见得比普通冰箱更保鲜，价格倒是买的时候令人咂舌，用了以后令人捶胸；厨房一带又潮湿又油腻，时常还会有刀叉掉落，木地板清洁起来费时费力不说，用的时间一长便伤痕累累；白色的饭桌看起来很有设计感，但是用起来却必须小心翼翼，更多的时候我们索性还是在岛台吃饭多于在真正的饭桌，最后还是盖上一张桌布才放心用起来。\n问题出现的时候我总是非常懊恼：当初老婆怎么想的？！可是静下来后反思：起初自己并没有提出异议，现在马后炮有什么意义？就算自己当时不同意，但是没有提出意见，引入“争吵”，分歧始终还是得不到解决，最终落得自己憋出内伤。\n面对不同意见的正确处理方法应该是拥抱“争吵”。\n首先，为“争吵”做准备。经过透彻的思考理清自己的思路，遍历可能出现的情况和解决方法，如果还是确定自己的想法是正确的，进行下一步。\n第二步，引入“争吵”，约谈分歧者。开诚布公的交流彼此的想法，让不同的意见碰撞，哪怕激烈一些也可以。这个时候的口舌之争总比日后接受不想要的结果要强。这一步的重点是：坚持己见（因为第一步已经打好了基础）、尊重“争吵”者、在分歧者有道理时勇于承认错误。\n第二步后，无非就是你赢得了这场“争吵”，或者是发现对方是对的而接受他的观点，要么就是两不相让，没有结果。或赢或输都为这次“争吵画上了圆满的句号：日后不论谁对谁错，都不应该再翻旧账。如果是对方“胜出”而结果证明你是正确的，不要责怪埋怨；如果是你赢得“争吵”而日后发现你是错的，也不要内疚不安。\n如果“争吵”不出结论，就要审时度势了：如果你可以或者应该做主导，就拿出一点魄力来：就按我说的做！然后坚决执行，一条路走到黑。如果最后证明你的选择是错的，勇敢承认错误并争取原谅。如果本来就是人家的地盘或者领域，就不妨让他做主，然后注意观察事态的走向。看看是不是别人说的是对的，有没有自己可以学习提高的地方。\n通过这样处理分歧，我想会比事事谦让做老好人要靠谱很多。因此总结自己以上的想法，希望可以在以后的分歧中，无论工作生活，拥抱“争吵”。\n","description":"","id":19,"section":"posts","tags":null,"title":"拥抱“争吵”","uri":"http://justinyhuang.github.io/posts/yong-bao-zheng-chao/"},{"content":"Recently I have been working with a wide range of software engineers on a new project. The experience with various engineers inspires me that there could be at least 3 levels of software engineers, when looking at what they are actually talking to.\nThe first level engineers talk to code. They focus on writing good code that works, easy to understand and maintain. When a task is assigned to them, the engineers will start immediately designing and implementing the code; when a bug is reported, they step in the code with a debugger to find out which line of the code goes wrong. Many of us starts from this level.\nThe second level engineers write good code, but they talk to machines. Their focus is on the signals that get in and out of the target machines. They understand the machines don\u0026rsquo;t talk in C++, not even a 1-and-0 language: some will talk to you at 3.5 volt while some would only listen to you and reply back when you raise your \u0026lsquo;voice\u0026rsquo; to 5 volt. The engineers would expect noises like ESD when talking to the machines and would prepare signals not to be buried by the noises. They make sure the code written gets translated to the machines and vice versa.\nThe third level engineers are able to write good code and they know how code would turn into signals that interact with the machine, but they talk to people. There is no considerable size of project that could be accomplished by one engineer. The last type engineers, while capable of detailed design and implementation, could look at a project from a higher view point: How much cost would be added to the product with this new feature? How would the new code be tested? Can we fit this change request into the current schedule? Are there some clients that would interact with this new component? and so on. With the questions in mind, the engineers will work with the hardware, finance and marketing teams on on the return of investment; they will work with the test team on the test plan; they will work with the management and manufacturing on release plans and factory details; they will work with other team members across firmware and software on inter component communication and synchronization\u0026hellip;\nWhat is more, the third level engineers usually play as leads of a group or a team. They make sure every team member gets the opportunity to learn and grow. They get things done with simplicity and efficiency. They are accountable for planed delivery. Many times you will see them talking to people, but not coding in the cube. But when they code, they do it right: they lead by example.\nAfter I realize the three levels, I find it interesting to observe and categorize the engineers that I work with: not to say being a first level engineer is not good, it is just that understanding the differences between the levels helps me learn and work better.\nHope it helps you, too.\n","description":"","id":20,"section":"posts","tags":null,"title":"Three Software Engineer Levels","uri":"http://justinyhuang.github.io/posts/three-engineer-levels/"},{"content":"记得有一种说法：人可以分成两类，一类人通过社交获取能量，另一类人通过独处获取能量。\n对于第一类人来说，与人交流沟通的时候他们会觉得越发的精力充沛，如果长时间无法和其他人接触他们会变得毫无生机。\n第二类人则相反，独处的时候他们可以自己产生能量，自己做事情的时候会更容易专注且精力旺盛。一旦与人社交，他们会觉得自己的精力被不断的消耗，长时间的社交会让他们精疲力尽。\n某天坐在飞机上无聊，一直看着前排两位乘客隔着走道全程侃侃而谈。末了着陆后，还大有手挽手一起下飞机的意犹未尽。\n于是便想到了这两种类型：第一类人可以归属为动物，他们需要不断获取“食物”来补充能量。因此这类人的进攻性可能会比较强。以此类推，第二类人就是植物，他们自己安静的就能生产能量。这类人通常会比较自足。并不是说“动物人”不如“植物人”。整个人类社会离开哪一种都不能发展，“植物人”提供社会发展的能量，“动物人”推动社会前进。只是当一个“动物人”找你聊天的时候可能是他“饿”了，而当“植物人”和你交流很可能是因为他重视你才会愿意为你付出能量。\n最后顺带提一下：我是“植物人”，如果我时不时有找你聊天，那么表示我很把你当朋友:)\n","description":"","id":21,"section":"posts","tags":null,"title":"关于人的两种类型","uri":"http://justinyhuang.github.io/posts/guan-yu-ren-de-liang-chong-lei-xing/"},{"content":"经过274天的准备，我们的女儿选择在2015年的母亲节出生。出世后啼哭了三声她便安静下来，睁开双眼观察这个陌生又熟悉的世界。随后她还是那样安静，趴在妈妈的身上，好奇的看着麻醉药失效后缝合伤口的妈妈痛苦的呻吟。一直到护士给她注射防疫针，她才哇的一声大哭起来：欢迎来到残酷的现实世界。\n作为全程陪同的准爸爸，真真切切体会了一把生命诞生的神奇和感动。\n难忘妻子在经历这“极痛之痛”时表现出来的坚强和意志力：一次又一次的用力过后感觉她都已经精疲力竭，而下一个宫缩到来时她又继续伴随着剧痛重新使劲。这样简单的使劲五次，休息两分钟，使劲五次，休息两分钟持续三个小时之久。到女儿完整出生，我已双眼泛泪。事后她说当时就只有一个念头：痛死了，要把这家伙弄出来。而在后续的伤口缝合阶段，因为医护人员和设备的问题，麻醉药的供给终止了。医生每一针下去，拖着长长的线拉起来，她都痛得生不如死。而在每一针的间隙，看见趴在自己身上的女儿，她又忽然像换了个人一样开心的说“Hi……你好可爱呀……”。随后又是生不如死的疼痛。在此之后，对每一位母亲我都又多了一份敬意。母爱的伟大远远超出我之前的理解。\n女儿的出生也打乱了我所有的生活节奏。每天吃饭睡觉准时的我，在她出世之后每天吃不定时，睡不安稳。各种各样的新问题和新忧虑都让人应接不暇。而神奇的是，一周过去了，哪怕我每天都只能睡不到4小时，却依然精神充沛，只要看见她无辜的小眼神，就有如打鸡血般。看到她身上的黄疸，心疼不已。忍禁不住的时候还会偷偷跑到茶水间抹眼泪。也许这便是生命重心转移的起始吧。获取了30多年的爱，终也到了付出自己爱的时候。有一个同事说小孩子的诞生比新婚还厉害，犹如原子弹，彻彻底底地摧毁你生活的一切。这样的说法负面了一些，但是女儿出生的影响力和原子弹是有得一拼的。\n当满头大汗处理好里面或黄或绿粘巴巴脏兮兮的尿布，那个在空中挥舞着小胳膊小腿的肇事者一不小心向你撇一小嘴笑的时候，那种满足和幸福感扑面而来。这大概便是父亲最简单而直接的动力了吧。\n","description":"","id":22,"section":"posts","tags":null,"title":"女儿诞生","uri":"http://justinyhuang.github.io/posts/nu-er-dan-sheng/"},{"content":"小区最近搬来了一家人，爸爸是玻利维亚人，妈妈是日本人，还有一个1岁小女孩，十足日本娃娃相，很是可爱。\n爸爸是另外一个城市的医生，忙起来要好几天都不在家。于是我时常见到的就是这对日本母女邻居。\n虽然之前有到过日本，也因为工作的原因和一些日本技术人员打过交道，但是一直到见到日本邻居之前，对日本人的感受还没有那么的深刻。\n之所以说深刻，是因为每一次见到她们，我都会马上有一种身在日剧中的感觉：\n无论什么时候，只要和日本妈妈打招呼，她总是会展现出很日本的那种惊讶的表情，然后仿佛使足全身力气般笑着鞠躬，点头回礼。每次见到日本娃娃，她也是阳光满满的微笑着走向你。\n比起美国人带着墨镜酷酷的一声Hi，然后风一样的飘走，这种日本式的招呼更让我觉得友善而温暖。以至于如果哪一天见到她们，那一整天都会被这一股暖流感染。\n以往看日剧的时候觉得“切，都是在演戏”，而当真正感受到这种日式礼节之后，才被它无形的，看似微不足道的力量所震撼：我们做不到这样。\n圣诞的时候我们应邀去这个邻居家做客，日本妈妈是个钢琴老师，在邻居们都到齐了之后，爸爸发给大家一张节目单，妈妈坐在钢琴前为大家弹奏预先编排好的曲目。如果不是亲眼所见，我不会被日本妈妈的那种简单、纯净和认真所打动：这是一种仿佛自己也曾有过的简单、纯净和认真，这也是一种自己想要有的简单、纯净和认真，可惜的是，这却是一种自己没有的简单、纯净和认真。\n于是又会想，也许在中国还是礼仪之邦的时候，我们也是这样以礼相待的吧。那时候的日本人也许也被震撼了吧。擅长学习的日本人吸收了中华文明的精华，并一直延续广大到今天。\n而在日本人学习的同时，我们自己却也遗失得一干二净……\n现在有了日本邻居，是我们好好学习的时候了。\n","description":"","id":23,"section":"posts","tags":null,"title":"日本邻居","uri":"http://justinyhuang.github.io/posts/ri-ben-lin-ju/"},{"content":"After about one year since I put on the only post in 2014, eventually I write a new one: the summary of the year (so\nshame for this only one\u0026hellip;)\nAnd then I realize Octopress, after upgrading to the latest version, doesn\u0026rsquo;t work for my repo any more\u0026hellip;Because I know\nnothing about Ruby, this becomes absolutely a heart attack.\nAfter a few tries I decided to give up: I don\u0026rsquo;t like Octopress in the first place. It is just only the first available\ntool that I found for static blog generation. It worked, but not now.\nLater Nikola appears in my search result. For someone feels more comfortable in Python. Nikola becomes my next straw of\nrescue.\nThere are already many resources showing how to install, generate and deploy your blog/website with Nikola. This post is\nby no means the 1001th instruction. I would just share what I feel about this static website generation tool:\n  If you are familiar with Python, getting familiar with Nikola takes a second. From its configuration file to an\nexception when running the tool, you will feel just like home.\n  This is more of my personal opinion: the reStructuredText syntax appears to be easier and the source file looks more\norganized. Compare the way you embedded a link in Markdown and reStructuredText and you will know what I am talking\nabout.\n  Some features, like defining the site for different localizations, are great. I am not aware of such handy features in\nOctopress. It is said that Nikola comes with a lot of plugin as well. I will try later.\n  There are still too few themes that are available for Nikola. To the time of writing, there are only less than 10\ndifferent looking themes available on the official site of Nikola. The current theme that I am using looks OK, but I\nwould not use it if I have better choice, and yes, I am too lazy to build my own\u0026hellip;\n  The deployment of a Nikola site to Github is a myth. Some of the instructions from Google are out-of-date, while some\nnew ones just don\u0026rsquo;t work. Eventually I decided to go to the mailing list of Nikola, which is where I will recommend to\nyou as well, and find out a way to successfully deploy the generated site.\n  While I am not 100% happy with Nikola, I would still recommend it to people who are looking for a way to generate static\nwebpages. It\u0026rsquo;s free, under active development with considerable size of community.\nLet\u0026rsquo;s just hope it grows and gets better.\n","description":"","id":24,"section":"posts","tags":null,"title":"Migrate To Nikola","uri":"http://justinyhuang.github.io/posts/migrate-to-nikola/"},{"content":"2014年的总结是在2015年元旦很久后，加班的间隙写的。\n回头一看事实上这一年什么都没写，这篇算是名副其实的年记了。\n2013的时候感叹好多变化，2014更是让我应接不暇。\n忙碌了1/3年，入住了自己的家。大家都说恭喜，你们圆了经典的美国梦啊。我心里却是十分忐忑：身份还没搞定，前程也没把握，这会是将来后悔的一步吗？再一想：主让我们来到这里，又让我们拥有了自己的家，为什么不心怀感激地生活下去，而还要心惊胆颤地担心未来呢？相信自己相信主的安排，才是基督徒最大的能量啊。\n于是就不再担心了。新家比上海的小窝要大很多，要花的时间和精力也成倍增加：自己动手安装水电，自己忙活修剪草坪，大半年下来竟然也略通各种维修，收获了我自己小修车后的另外一大类技能。于此同时也对木匠活感兴趣起来，从最先装窗帘装柜子，到自己动手做小凳子做大木床，我开始对这种和平时工作完全不一样的活动深深着迷起来，如果一个人在家，在几乎零度的车库里我可以泡着做木工一整天：实在是太有意思了！今年的私房钱也几乎全部花在了木工工具上，希望明年有时间可以完善自己的小作坊。\n有了新家应该有新成员。在我努力筹备下（还真是我的努力筹备，呵呵），我们的第一个宝宝，予恩，现在已经在妈妈肚子里7个月了。予恩妈在孕期前4个月都被剧烈的反应影响，体重不增反减，所幸4个月后开始渐渐恢复。可以和予恩爸一起开始准备予恩的房间和小玩具了。予恩爸学会了做简单而好吃的饭菜，还学会了给予恩妈按摩。也许予恩永远都不知道，为了她的诞生爸爸妈妈付出了多少担心，多少紧张，多少欢笑和泪水，多少牺牲和退步。只有在经历了这些之后我才开始体会为人父母真的是世界上最需要付出爱的行为。一个人可以很开心，两个人可以很潇洒，但是要再继续加入更多的人，就要付出大得出乎想象的代价，而如果没有爱，不会有人甘愿迈出这一步。意外怀孕的除外，呵呵。父母们牺牲了自己的青春、机遇和任性，为的就是让新生命尽可能健康的成长，尽可能快乐的经历，尽可能多的感受。而自己却不曾想过要从孩子身上得到什么。当自己成为父母后，才真正对这样的感情这样的爱有所体会。与此同时，我也为自己能成为这样的父母而骄傲。\n有了新成员，跟着就有了一堆新的东西。准妈妈担当了采购的任务，小予恩如果喜欢的话，记得感谢妈妈哦。如果不喜欢……就当我没说过了。\n14年我们的婚姻走到了第八个年头，青铜婚的我没有像以往那样记录些什么。一是太忙（2014一年就写了13年的一篇总结），二是也确不知可以写些什么了。想感谢的已经说过，要抱怨的不必再提。总的来说我觉得自己的婚姻不是成功的。然而倒也不至于称之为失败。时常想起大米说他和老婆是亲戚关系，想想我们，其实也差不多，就是个伴了。\n为了能够保障家人的生活，两年前我做了决定，继续做打印机。这是一个问10个人，10个人外加一个路过的人都会说没有前途的夕阳行业。两年过后，依旧很有危机感：如果哪一天失去了这份工作，我是否还能胜任下一份工作呢？只能发扬干一行爱一行的精神了。去年想要深入学习Lua，甚至一度打算移植到现在产品的平台上。很可惜没能进行到底，学习的进度和积极性也十分不理想。引进了木工和予恩后，2015年估计也不会有很大的进展。由于平台的整合，有机会接触C#，虽然一直对C#不感冒，不过能接触掌握一门新的语言，在我还没有什么想法的时候，倒也不失为一件好事。2014年在技术上没有进步，能力上没有提高。很遗憾。\n2015年总结出自己的最大缺点：不善于发现问题。因为不善于发现问题，总是要到问题发生的时候才被迫亡羊补牢；因为不善于发现问题，总是无缘无故的乐观；因为不善于发现问题，一直都在做老好人。因为不善于发现问题，无法找到新问题需要的解决方案而使得创新受限。2016年，哪怕剩下的人生，如果能够改掉这个致命的缺点，我想我算是一个成功的人了。\n应该算是到了年记的结尾了吧。回头看看，说得伟大些自己为了家庭牺牲了事业的发展，说得实际些自己在周围伙伴都为自己的理想奋斗并略有小成的时候选择打安全牌，退缩不前。于是在写年记的时候，竟也发现无甚可总结。与其临渊羡鱼，不如退而结网。这一次的年记，以对新一年的计划作为结尾：\n  做一个好父亲好丈夫好儿子。\n  每月至少写一篇日志。或感受或记录，类型不限。\n  理解Python内部机制，熟悉C#运用，提高提交代码质量。（就在准备提交这篇年记的时候，老板问我要不要去做Video，这个在我看来是系统中最为复杂的核心模块，我想也没想就答应了。所以这一条应该是无法完成了。改为第6条。）\n  完成至少3件shop cabinet，基本完成木工房布置。\n  实现西班牙语词汇量翻倍。（西班牙语却是2014年坚持下来的唯一一项，距离5年基本掌握这门语言又进了一步）\n  初步了解Video的框架。能够胜任和担当基本的Video解错和功能实现。\n  再见2014。\n","description":"","id":25,"section":"posts","tags":null,"title":"2014","uri":"http://justinyhuang.github.io/posts/2014/"},{"content":"过去的一年感觉就像一个月，呼的一下，就没了。\n去年说最大的事就是肉身翻墙。墙外的第一年则是各种重新开始。结交新的朋友，融入新的生活，开始新的工作，尝试新的事物，开拓新的世界。\n如果没有朋友的各种帮助，我们也许会翻到世界的另外一个角落，也许会有不一样的精彩，但不会有现在那么多的快乐和宁静：\n相对于大都市，小城镇的朋友之间更亲近，生活气息更浓厚，人情味多一点，火药味少一些。\n朋友之间的聚会比在上海要多很多，有时虽然有语言的障碍，但丝毫不影响情谊的流动。老婆有了更多的时间和机会做新菜学缝纫，我自然也口福不浅，说不定以后也就衣食无忧。\n对于我们这两个城镇长大的人来说，没有比从大都市回归小城镇更自然的事了。\n这一年里老婆和我无数次的感叹，如果没有这些朋友，我们的生活一定会失去很多美好的东西。感谢主，在我们身边安排了那么多天使。\n生活也因为新的环境改变了许多：上下班只需要15分钟了;不用再挤公车了;夏天更热了;冬天更冷了;中餐更难得了;和自然更亲近了;更多事情需要自己动手了。开始认真锻炼了，先是在编译的时候做俯卧撑，在发现公司有健身室之后每天都可以偷偷溜去做一些力量练习。体检发现瘦得不成样的我也会有胆固醇的问题，于是每周也坚持至少一次有氧运动。\n都是好事，除了一点：离家人更远了。每周打电话回家的时候感到是更深的无奈和更乏力的关心。害怕自己的无力总有一天会让我后悔迈出这一步。\n然而既已出发，就当全力以赴。回头看或有归心，都是对当初勇敢的辜负。\n虽然还是同一家公司，但几乎是换了一份工作。离开了我喜欢的BSP，开始做一些嵌入式应用层面的东西。一开始自然是有点不太乐意，不过为了能够促成这次翻墙，也就接了下来。可能我还真是干一行爱一行的人，这一年里也慢慢在其中找到自己喜欢的部分：针对硬件接口的旧代码太过冗繁，而且每次有新的版本都需要人工阅读硬件规格书来修改代码，非常容易出错。于是我们实现了一条工具链，用以将硬件提供商的规格书文档直接转换为代码，做到只要新的硬件有符合格式的文档，代码就可以自动更新生成。效果不错，而且在两种不同部门的实现当中，我感觉自己的方案更胜一筹。小有成就感。很多时候工作就是这样，当你没有选择的时候，与其反抗还不如摆好姿势享受。　今年也尝试了很多新鲜事物。第一次滑雪，第一次动手修车，第一件木工作品当成礼物送给老婆，第一次在后院烧烤招待客人，第一次见识加勒比海的蓝，第一次收到圣诞节的礼物。\n发现自己可以用语言的优势帮助更多的人，于是尝试开始翻译一些开源的科技书籍文章，不少人喜欢，相比之下我做的Git工具却是无人问津，看来有些东西还是不能强求。还开始自学西班牙语，很多时候和餐饮业者的交流用西班牙语更自然，等我学好了，到这些语系的国家玩也更有把握了：看来我还是比较适合搞语言相关的事情。不知道这条路对不对，也不知道醒悟的早不早。　2013年带来的世界是全新的。每一天睁开眼都不再是自己熟悉了快30年的环境，每一个遇见的人在过去也都像是遥远大陆上的另一个种族。说着不一样的语言，听着不一样的八卦，学着不一样的思路。这种改变的影响会是很潜在且深远的。30年后我们重新诞生，从零开始。有兴奋，有慌张，有发现，有不安。转变的阵痛希望能带来新一代更好的成长。能做到这一点，我就满足了。\n今年的总结分很多天草草写就，还是有很多没有总结进来，可这也实在是为了迎接更好的2014。不知道自己做得怎样，但很期待明年这个时候写下的东西。\n就这样，明年见。\n","description":"","id":26,"section":"posts","tags":null,"title":"2013","uri":"http://justinyhuang.github.io/posts/2013/"},{"content":"有一个词，“不知不觉”，在七年之后形容铜婚纪念日应该算是比较贴切的。\n至少对我们是这样。\n过去的一年有点忙，以至于这篇记录也是在纪念日过后的一个加班的间隙不知不觉写完的。\n忙的好。我想。很多时候忙碌的大脑会选择性关闭一些胡思乱想的无聊神经，省去很多麻烦。\n在结婚第七年忙碌的度过，不失为解决各种“痒”的有效方法。\n现在回头来看看，我们离“像铜一样坚不可摧”还有很长的距离：七年前的各种问题到现在还顽固的存在；沟通不畅的程度甚至有所恶化；甚至同床异梦的时候也不鲜见……虽然我希望这一连串的记录是真实的，而不是晒恩爱或是放烟雾弹。不过具体的问题，也就不多下笔墨了：少一些对不愉快的记录，为了鼓励你这样的观众，更为了鼓励我们自己。\n所幸我们还算是平安的度过了这样的一年。\n一个是忙。因为忙，很多矛盾在忙碌之中就也不知不觉淡忘消化了。因为忙，很多问题就用搁置争议的方式化解了。也因为忙，在忙下来后彼此的关心和照顾也不知不觉的让冲突软化了。\n一个是搬到了一个小城市。生活因此变得简单很多。当滤掉大部分的噪声，绕过相当多的陷阱之后，注意力就可以更加集中于工作和生活，就会更容易感受到过去难以体会的温馨和幸福。多一分正面的感受，就多一根婚姻的支撑。不知不觉中环境的变化帮助我们对那些杂音做到“不知”，“不觉”，也算是我们搬家的主要目的之一了。\n于是我愈发相信这是主在暗中使劲：找来好多事情让我们在疲于奔走间选择原谅，换到一个小城让我们在简单生活中用心感受。\n忙碌的纪念日过得很简单：一束花，一盒蛋糕，一碟煎饺，一碗鸡爪，一瓶啤酒。\n简单的庆祝在下雪的那一晚很难忘：我得意于亲自选的花，老婆又一次吃到最爱的蛋糕和鸡爪（想想这样的搭配确实不常见……）。扫完煎饺吹完啤酒之后继续为小家做功课。不失为一个特别的纪念日。\n如果婚姻的成熟可以用某种曲线表示，不知道好的婚姻是不是沿时间轴一直往上的。如果用这种方法表示我们的七年，该曲线应该是在波动的，甚至有下行的趋势。我希望，但不知道，后续的曲线会“触底反弹”。到了某一个未来，若是看到这样高高低低最后还是上升的婚姻曲线，应该会有很多感慨吧。\n","description":"","id":27,"section":"posts","tags":null,"title":"铜婚","uri":"http://justinyhuang.github.io/posts/tong-hun/"},{"content":"Debugging is probably the first task for most of us in practice: Day 1 when you joined the team, someone senior called you to his desk and gave you a defect description, \u0026ldquo;go and figure out what goes wrong, young boy\u0026rdquo;.\nSince then you have a feeling that debugging would be with you for the rest of your programming life.\nAnd a majority of software engineering is about debugging, too. Therefore it is really worth spending some time considering: What to debug when you are debugging? Well I have to say the title is too big to fit in the post, however, considering everyone would have his/her own checklist when debugging, I feel like sharing mine here though it is far from complete.\nLet\u0026rsquo;s start from the origin of life: what is debugging? Google will point you to a formal definition, while I just understand it as \u0026rsquo;to find the bug in the code, and fix it\u0026rsquo;. Knowing this one could easily start debugging by asking: Is there a bug? How do you know?\nA way to reproduce the bug is a valid proof. Also don\u0026rsquo;t forget to check against the design document and be sure the behavior caused by the \u0026lsquo;bug\u0026rsquo; is not as designed. It is not uncommon that a test engineer throw a defect to you, which turns out to be a designed feature. So, first step, \u0026ldquo;make sure there is a bug and it is really a bug\u0026rdquo;.\nDebugging to software engineers is pretty much the same as tracking down criminals to detectives. A murder case will never be solved if no one knows who was killed, where and about when the victim was murdered. Similarly, we will need clues to get to the bug: normally a trace/log file, or a consistent way to recreate the issue. It would drive me crazy if someone asks me to find a bug, with only \u0026ldquo;it crashes and I have to power off the machine. There is no log file and I don\u0026rsquo;t how to reproduce it.\u0026rdquo;\nSome might argue they can find a bug by literally reading the code, but hey, do you really think that is efficient or even practical? I would not suggest trying this in any real world project. That is the second on the checklist: \u0026ldquo;either find a way to reproduce the issue, or get a good enough log file\u0026rdquo;.\nIt becomes more interesting when we know it is a real bug and some clues are available. If what you get is a lengthy log file, then what you need is a quiet cube, put on your \u0026ldquo;do not disturb\u0026rdquo; plate and try to catch the bug in the lines. The easiest way is to look for keywords like \u0026ldquo;error\u0026rdquo;, \u0026ldquo;warning\u0026rdquo; or the assert lines, but you don\u0026rsquo;t always get the luck.\nSometimes you would need to figure out the clues by putting the puzzles together, from the big log file in front of you, which sometimes could be in several G\u0026rsquo;s. When you get to this point what you need is a good tool to help you filter out the unuseful information and show you the gold. Use whatever tool you like the best, and if you don\u0026rsquo;t have one yet, you might like to try mine: filtering in Vim is powerful.\nIn short, \u0026ldquo;get your tools work for you on the log files\u0026rdquo;.\nIf the defect is reproducible, that is good news: the bug has been trapped and it is just a matter of time to locate and fix it. Debugging with a debugger, or repeat testing with more verbose debug output enabled, will reveal more information to where the bug hides. When debugging on codes that you are not familiar with, \u0026ldquo;talk to people who might either give you hints or correct your misunderstandings about how the code should be running\u0026rdquo;. Believe me, it will save you tons of time.\nIt would be your lucky day if you see another revision of the code running correctly, or the same code running on a different platform without the issue: you can simply compare the two different behaviors and quickly locate the bug!\n\u0026ldquo;Looking for suspicious\u0026rdquo;\n  Cache\nOne thing you should check is the cache.\nThere is one case where I set a value in the memory via DMA. What I saw in Snoop (a tool used to listen to the traffic on the data/address bus) is that memory has been written with the value by DMA, but after the write if I try to read the memory, I still get the old value. But if I wait for a while, the value I read becomes the new one.\nThis is because the read, in this case, is performed on the cached value. Only when the cached page gets updated do I read the new one.\nTwo possible solutions here:\n  invalidate/flush the cache very time when you need to read the most recent value.\nThis will ensure all the cached values to be updated, but will introduce considerable overhead. Also if some of the other values do need caching, updating these values might cause some side effects.\n  access the non-cached copy of the memory.\nThere are platforms that support two mapped addresses pointing to the same memory: one in the physical memory and the other in cache. Simply access the non-cached memory one could always get the most recent value.\nFor instance, in PHX (an OS used in one of my past jobs), memory in 0x01234567 is the cached memory, while 0x41234567 is the non-cached memory. The address \u0026lsquo;OR\u0026rsquo; 0x40000000 will point you to the non-cached memory.\n    Timing\nEspecially in multi-thread/process environment, the execution flow might not be the same as you thought.\n  Analog v.s Digital\nDo check the signal level is high enough to be read as a \u0026lsquo;1\u0026rsquo;\n  Stack Information\nWhen the system crashed, data in the stack of each running thread will be the only evidence to tell you what has happened.\n  Hardware Issue\nIt would be wise to tell whether it is a hardware issue or a firmware defect: sometimes it won\u0026rsquo;t hurt to swap some hardware and redo the test. Instead of wasting your time debugging something doesn\u0026rsquo;t exist, let\u0026rsquo;s first make sure the hardware is correctly working\u0026hellip;\nOne example, that cost me about 2 days, is that when working on AOAO (AutoOnAutoOff) there is a defect in which the device would crash when wake up from ActiveOff. By looking at the trace it appears the PC pointer somehow gets messed up, likely to be a memory corruption. So I kept on debugging and could not find out who stirs the water\u0026hellip;until Mike says \u0026ldquo;let\u0026rsquo;s swap our formatter and see if we could reproduce the issue\u0026rdquo;. Later on it is obvious that the issue goes with the hardware: some of the DRAM chips would flip the data at certain situation, and the hardware team is still investigating this hardware issue: which took me 2 days trying to find its firmware counterpart, it just doesn\u0026rsquo;t exist!\n ","description":"","id":28,"section":"posts","tags":null,"title":"What to Debug when You Are Debugging","uri":"http://justinyhuang.github.io/posts/what-to-debug-when-you-are-debugging/"},{"content":"Tablets, smart phones, smart watches\u0026hellip;\nBy making the computing units even smaller, we are trying to bring these intelligent devices much closer to its master, the human beings. From PC to laptops to smart phones, the pioneers have made billions of dollars from their customers, who happily give up the greens for those latest fancy toys.\nNow some are trying to replicate the success by offering a smaller accessory: the watch. Samsung is on its way, and there would be a number of well-known names getting on board, too. I am not sure how people would react to the next-gen watches, but I know I am not quite into the thing.\nI think smart watch is going to fail\u0026hellip;\nI know it might turn out that it is me who fail in this guess game, but i might have the chance to win the bet as I am not guessing blindly:\n  \u0026ldquo;The real estate on a watch is too small\u0026rdquo;.\nThe success of tablets and smart phones is based on the fact that these devices serves as platforms of information, which is displayed on the screens. What would you expect to see on the screen of a watch? The content you can get from a watch size screen is limited, thus the service. People buy an iPad because they can browse websites, play games, watch videos, read books, holding conferences\u0026hellip;you name it. If the iPad were to only show you your blood pressure and the time, are you going to buy one?\nI am not saying the smart watches can only show time and tell some basic biological statics, but the \u0026lsquo;window\u0026rsquo; of the information on the device is too small to provide enough interesting services and content. Now it is not uncommon to find a 6-inch mobile phone in the market, why do you think they are working so hard to make the screens bigger and bigger?\n  \u0026ldquo;The watches are born in an embarrassed era\u0026rdquo;:\nPeople are so used to the smart phones, and smart glasses are emerging.\nWhen I bought my first laptop, I know it will do most of the works my PC is capable of. The moment when I got my first tablet I love the way that it turns my need for a lighter laptop into reality. My smart phone? I am glad that I don\u0026rsquo;t have to take the bulky pad on a bus when what I need is just to read some news.\nWhat I try to say is that a new device should be able to meet people\u0026rsquo;s need for information, compared to the current generation, in a better way.\nI don\u0026rsquo;t see this happening on watches, which are just much smaller phones that are bound to your twist.\nWorse even, the customers know there is such a thing called the smart glasses. They are small, too. However, the screen is insanely closer to the eyes. That means given some development in technologies, the screen could provide more information with the increased resolution, and still remains the same size!\nIt is in this very moment that the smart watches come to the world: they are not able to compete with the smart phones on providing information to the users, and the spot light on their little bodies will soon move to the smart glasses: They are equally small, if not smaller, and you get much more information from the new guy!\nThat will be when smart watches get off the stage, people just don\u0026rsquo;t feel interested in them anymore.\n  \u0026ldquo;Frankly speaking, who wears a watch now?\u0026rdquo;\u0026quot;\nEven Tim Cook says:\nIf we had a room full of 10 to 20-year-olds and we said, \u0026lsquo;Everyone stand up that has a watch,\u0026rsquo; I\u0026rsquo;m not sure anybody would stand up.\nI am not a fan of him but I must admit he has a point here. People are not wearing watches anymore. A watch has to be better than an interesting new device to change the habit.\nTake a look at the smart phones, they replace the \u0026lsquo;dumb phone\u0026rsquo; easily because many people had a phone, and the new ones are nothing different but much \u0026lsquo;smarter\u0026rsquo;.\nAnd let\u0026rsquo;s take another look into the future: would people like the glass? Very likely, because we wear them all the time! Many of us have more than one glasses because they are cool in different ways. You drive with it, read with it, eat lunch outside with it. So how about making your glasses a bit smarter? Why not?!\nBut it would be a different story for the watches.\n  Well all I have to say is that I don\u0026rsquo;t like the idea of smart watches, and I feel very interested in seeing how far it goes.\nWould I read this post on a watch? No, I hope I could do so with a smart glass, though.\n","description":"","id":29,"section":"posts","tags":null,"title":"About Smart Watches","uri":"http://justinyhuang.github.io/posts/about-smart-watches/"},{"content":"There are many ways to repeat something in Vim. Knowing how and when to repeat would greatly save your time with Vim.\nGet Started\nNatively Vim provides some basic methods to repeat:\n the \u0026lsquo;.\u0026rsquo; will repeat the latest operation: if you \u0026lsquo;dd\u0026rsquo; to delete a line, \u0026lsquo;.\u0026rsquo; will continue deleting another the \u0026lsquo;p\u0026rsquo; pastes contents copied (or in the Vim language, yanked) before. Combined with the use of registers, one can keep multiple copies of different content and pastes them into other places.  Be More Powerful\nBesides the basic toys, Vim enables much powerful repeat technique with its record feature, the q command allows to repeat a series of Vim operations, which, when nested or with numbers of repeated operations specified, could be extremely efficient. A life changing feature.\nExample:\nWhen analyzing logs it is sometimes required to remove the time stamps and compare two logs.\nThere are many ways to remove time stamps in a log file, using the recording feature is one of them.\nIn the example below, I first go into the recording mode, remove the timestamp of the first line, go into the next line, and end recording. The remove-time-stamp operation has been recorded and stored into register \u0026lsquo;q\u0026rsquo;. Because there are still 48 lines to be processed, I simply type \u0026lsquo;48@q\u0026rsquo; to repeat the same operation for 48 times and the whole log is cleaned.\nNot everyone would think of it but regular expression is another technique that could be used to repeat operations in Vim. And when you used to it, you will give up anything to be able to do regexp in Vim =)\nThere are many resources available for using regular expression (Google is your best friend\u0026hellip;), there is even a website just for this topic! I think it would not be very interesting for me to \u0026lsquo;repeat\u0026rsquo; here\u0026hellip;\nMake Extra Steps\nBesides the native support provided by Vim, there are many plugins available out there to further improve your efficiency.\nMarvim being one of them, makes it easier to store your frequently-used-and-complicated operations and even easier to repeat them.\nMarvim allows saving operation macros by name and groups the stored macros by namespace. On the other hand Marvim provides searching the operations by name: especially helpful when you have a lot of operations saved.\nA simple but illustrative example is shown below for those who are interested.\n","description":"","id":30,"section":"posts","tags":null,"title":"Repeat in Vim","uri":"http://justinyhuang.github.io/posts/repeat-in-vim/"},{"content":"When accessing a Linux machine remotely in Windows, many might use VNC or similar remote desktop tools. Some might simply use Putty. Both are not quite satisfying: VNC and the like ask for too much network bandwidth when transferring graphical data, while Putty doesn\u0026rsquo;t support X and limits your use to only in the console.\nSome might suggest using Cygwin, which will give you access to the X environment without sacrificing much bandwidth (it transfers the graphical parameters instead of pixel value). But still installing Cygwin is a pain, not to metion its huge size, which could be over 1G easily.\nRecently I just realize there is a way to get to work remotely from Windows with X setup, and here is you could do it:\n Download a Putty client (I would recommend KiTTY, give it a try) Download and install XMing. Start XMing and then run your Putty client. Enable \u0026ldquo;Enable X11 forwarding\u0026rdquo; in Category-\u0026gt;Connection-\u0026gt;SSH-\u0026gt;X11. Start a Putty session and try \u0026ldquo;xclock\u0026rdquo;  YES! It works! Even better, with minimal space and setup =)\n","description":"","id":31,"section":"posts","tags":null,"title":"Minimal Setup for Remote Access Linux from Windows with X","uri":"http://justinyhuang.github.io/posts/minimal-setup-for-remote-access-linux-from-windows-with-x/"},{"content":"在开始总结过去的一年前，手悬在键盘上估摸着有5分钟的时间：很多事不知从哪个开始——是否说明去年过得很混乱？还是非常充实？\n在第六年的婚姻。经历了很大的考验，无论是外界还是自己的内心。不过总算是挺了过来，给自己打85分，80分成绩额外加5分态度。接下来，痒之年。\n孤独的外婆最后还是离开了人世。在过世后再去怀念悲痛应该算是很虚伪的事情，我能做的只有多陪陪仍在世的亲人。外婆，希望真的有天堂，这样你就可以快乐幸福了。\n工作上公司给了一些新鲜活，技术上没有什么挑战，就是多了解了一些工程上的方方面面。也了解到：软件工程师中，三流的仅限于和代码打交道，二流的还能和机器打交道，一流的才可以和人打交道。\n没能够好好的看几本书，只有算法导论粗略过了一遍，不得要领。翻译了一个小册子，顺带做了些小工具。虽然景仰那些没事就弄个小gadget出来玩玩的人，我还是不能好高骛远，定位好自己，做力所能及之事。身边不少朋友都在玩Lua，明年若有空，也希望可以入个门。\n接受主入我心已经两年，尽管不时警醒自己要正确做事为人，但仍难以让自己完全不受撒旦的引诱。或自轻，或易怒，或迷失。通俗点说，道行尚浅。它为我们设计了完美的人生，我们唯一要做的，仅仅是要知道如何按主的设计去生活而已。\n一年的忙碌还有部分归功于多次的旅行。我们一起找到了南十字星，一起泡温泉，一起在樱花和枫叶前留影。2012我们还回了3次家，只是海南粉还没吃够。\n忽忽悠悠一年也就过去了。乱，确实挺乱的。\n不过自己怎么乱，也不及这个乱象丛生的时代。几乎每天都可以听到令人咋舌的新闻，不是无耻之至，就是无知之极。然而在这样的年代，新闻过夜就会被人淡忘，越来越多的人习惯于义愤填膺后继续偷鸡摸狗，早上戴红袖章清理卫生死角，傍晚就出来遛狗大小便顺带清清自己喉咙里的浓痰。新闻即娱乐，真的勇士流出的鲜血，到现在连看客的数量都无法保证了。\n不过，惹不起，总躲得起吧？\n2012做的最大的事，肉身翻墙。想想真有点没出息。不过，以自己的能力，能做的目前看来也就只限于此了。\n而这也只是个开头，后面还有太多的要做。\n世界末日终究还是没有来。新的一年，希望自己能沉稳，能有序，能有所收获，能尽力担当。\n","description":"","id":32,"section":"posts","tags":null,"title":"2012","uri":"http://justinyhuang.github.io/posts/2012/"},{"content":"与婚后第六年比起来，过去的纸 布 皮 丝 木就像是小孩子过家家。\n先是雯的住院，无论是心理还是生理都是两个人从未经历的折磨。\n感谢主，感谢家人和朋友的关心和照顾，几经磨练，我们才得以最终战胜各种困难。\n出院的那天，有一种从战场归来的喜悦，也有一种考试结束的轻松。\n然后在一次聚会上，大米夫妇戏称现在彼此间已经是亲戚关系。大笑过后，看看我们，竟然也颇有些亲戚的感觉了。\n我们已经习惯了对方的存在，习惯了关心对方的同时也被对方关心。我们一起生活，一起出游，一同快乐，一同承担。但与此同时在我们之间已经失去了若干年前的一些激情，一些冲动，却是滋长了一些无奈，一些迟钝。\n这么些年的同欢共难，我们结成愈加坚固的钢铁，而历经年月的外表也已锈迹斑斑的布满老茧。\n茧是死皮，锈是腐铁。\n我们已经熟悉对方的一切，熟悉对方的优点更对缺点倒背如流。在对方需要的时候，我们都可以给出很好的意见。而在他不需要的时候，我们也会固执的指指点点。\n“我最深爱的人伤害我却最深”，最了解你的人最有能力深戳你的痛处。或许，考验才刚刚开始吧。\n这个周年没有在家庆祝，在一家烧烤店里我们用两片烤肉代替碰杯：希望今年的愿望明年成真，希望明年的庆祝更热闹一点点，希望我们一直相扶走下去。\n有一种说法：婚姻是坟墓，每隔一段时间就要去扫墓，否则就会杂草丛生。\n希望像我这样每年打扫一次能够留下足够的记忆，除去多余的杂草，扫干净我们的小小坟包。\n","description":"","id":33,"section":"posts","tags":null,"title":"铁婚•铁与锈","uri":"http://justinyhuang.github.io/posts/tie-hun-tie-yu-xiu/"},{"content":"十一月，我们去了一趟日本玩。\n同事听说了表示不解：你不要命啦？这个时候去日本？\n家里人知道后表示担心：要注意安全啊，现在关系那么紧张。\n我们在大阪、奈良、京都、宇治走了7天，赏枫喝茶走大街。满载而归回到家里。\n由于日本人英语普遍不太好，我们大多数用的蹩脚的日语问路、问菜、问价格。由于我们的日语实在蹩脚，问题里面还掺杂了一堆英文。所有我们问过的人都知道我们来自中国，但我们得到的是极其热情的帮助和充满善意的微笑：\n一位先生用了半分钟弄清楚我想要去的丸龜製麵，示意让我等等，用了两分钟在Google地图上确定了面馆的位置并思考应该怎样告诉我如何走过去。他思考的结果是,亲自带我去。\n一对老夫妇在高岛屋百货买了一套魔术道具，我在后面看着觉得很有趣。他们在和我对话后知道我是中国人，显得非常高兴，老太太马上用不怎么流利的英文问我的行程，对日本的感觉，并推荐我买这款道具，并在最后祝我旅途愉快。\n在去東福寺的路上我们找不到车站，只好找旁边的一位交通协管问路。他弄清楚问题以后叽哩呱啦一通日语告诉我怎么走，看到我一脸糊涂像才醒悟过来我不是日本人，于是带我走到路边，慢慢比划着告诉我怎么找到那个车站。在我示意我明白以后，还向我敬了个礼。\n坐在回程的飞机上，我在想，如果我是个日本人而我在中国某处旅行会是怎样？\n也许我会在面馆被泼一脸的面汤？\n或者是刚看到Muji就发现店门紧闭玻璃上挂着巨大的红旗？\n至于协管城管我已经不敢想象了。\n抛开别的不说，至少从这一点上，我见过的日本人是要更爱国，更爱生活，更爱和平一些的。\n","description":"","id":34,"section":"posts","tags":null,"title":"秋游日本归来","uri":"http://justinyhuang.github.io/posts/qiu-you-ri-ben-gui-lai/"},{"content":"晚上吃完饭，我在沙发上抱着电脑看视频，老婆背对着我上网也玩得起劲。\n“过半个小时，也就是9点，我去洗碗，你去洗澡，然后我们看碟。”，制定了方案，老婆继续趴在网上。\n“好的”。我继续看。没有用耳机，房间里只有我视频的声音。\n9点到了。\n“老婆，去洗碗吧”\n“嗯……你也去洗澡吧。”很明显，她还是趴在网上，没有要去洗碗的意思。看来真的有什么吸引到她了。\n哟，敌不动我不动？有点意思。\n我打算做个测试。\n9点15分。我忽然把视频的声音关掉。\n整个房间马上安静了下来。\n大概感觉到我要去洗澡了，虽然没有回头看我，但是她挪了挪身子准备起来。\n在她的背后，我继续测试，忽然又把视频声音打开。\n“嗯……”伸了个懒腰，她又挪回到原来的姿势，继续趴网。\n再次把声音关掉，眼前的这个家伙又开始挪动准备去洗碗。\n“哈哈”\n我忍不住笑出来，结束了我的测试。\n“果真是我不动你也不动哦！”全盘托出我的试验之后，她也没忍住，不停的笑骂我的心机太重。\n在某一个地方，每个人都有自己的开关。\n有些时候很多事不是我们不会做或是不能做，而是心里想不想做。\n在没有找到开关之前，总是会有这样那样的“不可能”出现：“我不知道怎么做”、“他不可能做出这种事的”……\n一旦那一个开关被拨动，过去想不到的就会被想到，别人认为做不出的就会做出来。快速得像电灯通电一样，简单得同汽车发动一般。\n那么，这回你的开关，在哪里？\n","description":"","id":35,"section":"posts","tags":null,"title":"开关","uri":"http://justinyhuang.github.io/posts/kai-guan/"},{"content":"This weekend I decided to migrate this blog from Wordpress to Octopress, because of many reasons searchable in google, and because with Octopress now I can write posts anywhere with Vim and Git. To help those who are now exploring Octopress (and myself sometime later), I\u0026rsquo;ve made some notes on the obstacles that I\u0026rsquo;ve seen as well as the solutions:\nMigration from Wordpress to Octopress\nThe migration was pretty easy, once you export from Wordpress to an XML file, exitwp generates the markdown files for you with a few key strokes. The only thing lost during the migration is the comment, but your life would made easy if you are going to use Disqus:\nMigration of Comments\nTo move your comments from Wordpress to Octopress, first install the Disqus plugin on your Wordpress and then export the comments into Discus.\nIt is said that the import might take up to 24 hours but I guess it will be much shorter for many of us.\nAfter the import completes, go to [your account].disqus.com/admin/tools/migrate/, build a CSV file following the example and upload the file for URL mapping. That is it for comment migration. Easy~\nCustomization\nThe next step is customization. There are not too many themes available for Octopress when I setup this site, and it appears that I have two options if I need something different:\n follow the instructions @ the official site get the Slash theme  As you could see I am too lazy to hack and therefore just go for option 2.\nLocalization Support\nFor bloggers who write posts in Chinese, the current Octopress has a limitation: lack of Chinese category support. There are also two ways out:\n To name the categories under \u0026lsquo;category_dir\u0026rsquo; in Chinese codings like RFC1738. This method works when I preview the pages locally, but failed after deploying the changes to Github. To name the categories in english, but display the nick names (in Chinese or other localizations). The second method asks for not only changing the category_generator.rb, but also some of the framework files. It works perfectly locally and on the server side. I would recommend this approach.  LaTeX Support\nEven though Octopress claims itself as A blogging framework for hackers, LaTeX is not supported by default. To blog with some mathematics, you could try the following to obtain this capability:\n in _config.yml, change  1  markdown:rdiscount   to  1  markdown:kramdown   install kramdown by doing  1  gem install kramdown   in bash\nin source/_include/custom/head.html add the code below:  1 2 3  \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\u0026#34;\u0026gt; \u0026lt;/script\u0026gt;   try the following  1  R_{ab} - {\\textstyle 1 \\over 2}R\\,g_{ab} + \\Lambda\\ g_{ab} = \\kappa\\, T_{ab}   and you should see\n$$R_{ab} - {\\textstyle 1 \\over 2}R,g_{ab} + \\Lambda\\ g_{ab} = \\kappa, T_{ab}$$\n","description":"","id":36,"section":"posts","tags":null,"title":"Hello Octopress","uri":"http://justinyhuang.github.io/posts/hello-octopress/"},{"content":"This will be a very unique article in the blog: it tries to depict my imagination of God that comes to me when I was coding.\nGod is a supercomputer, while we are just some little dum devices, some with a 8051, quite a few with MSP430.\nGod designs and creates all of us, giving us the ability to run programs, which also designed by him.\nGod writes bug free programs, which are specialized to each device.\nThere is no defect in God\u0026rsquo;s programs, when the programs are correctly run, all little devices do well.\nGod loves everyone he creates and give them freedom.\nGod loves us so much and gives us the freedom to choose what to run, otherwise we will be puppets that can only run the program downloaded.\nTherefore each device has the freedom to run whatever it likes, including those not designed by God.\nGod feels sad when his creation doesn\u0026rsquo;t follow his design.\nGod loves his creations and provide them the best (program). When we do something other than the program offered by God, he will be sad because he knows that is not for us.\nThe Bible is God\u0026rsquo;s design book, from which one could learn God\u0026rsquo;s design and know what his program is.\nBy reading the bible we know what God\u0026rsquo;s program looks like, and only when we know what is God\u0026rsquo;s design we would be able to tell his program from others.\nKnowing God is a supercomputer, we could answer many questions easily:\n  Why doesn\u0026rsquo;t God help me even when I pray and ask for his help so badly?\nGod has designed the best program for you and given you the freedom to run it.\nHe will not help you because if he does he would either have to change the program, or force you to run his program.\nHe will not change the program because God write bug free programs, he has offered the best program. No change is needed, period.\nHe will not force you to run his program because God loves everyone he creates and give them freedom.\n  Why do I need to read the Bible?\nYou don\u0026rsquo;t have to. But if you do, you will have a chance to know what God\u0026rsquo;s design is for you.\nAnd you know what is the correct decision to make when you are facing challenges.\nIf you know what is the right thing to do and do it, you make no mistakes and will not regret because you\u0026rsquo;ve run the program provided by God.\nThis is because The Bible is God\u0026rsquo;s design book and God write bug free programs.\n  I don\u0026rsquo;t see what I am doing is wrong, though people in the Bible study group disagree. Can I just do it?\nYou can do anything you like because God loves everyone he creates and give them freedom. You have the freedom.\nBut if you choose not to follow God\u0026rsquo;s program you will definitely make mistake and regret because God writes bug free programs.\nYou don\u0026rsquo;t see anything wrong not to follow God\u0026rsquo;s instruction because God is a supercomputer. As little devices we have too simple instruction sets and therefore would not have the capability to understand what can go wrong and how. Simply follow God\u0026rsquo;s program and everything will be fine.\n  I know I did something wrong, can I make it up by repenting? I have no time to read the Bible. Other than that, would God help me?\nWhen you did something wrong, your life is off the design by God.\nDepends on the mistake you made, it might bring you back by repenting. It might also ask for more to correct your mistake.\nGod\u0026rsquo;s help is in the Bible. The best way to correct your mistake is to turn to the bible and to do what it tells you to.\nOther than that God will not help to do anything, because:\n    God writes bug free programs for you but you choose not to follow.\n  The Bible is God\u0026rsquo;s design book and you choose not to read.\n  God loves everyone he create and gives them freedom so he will not force you to do the correct thing.\n  I am not sure if the above is truth, as no one could say it is wrong.\nBut I find it logical and helpful to clear many confusions.\nHope that helps you, too =) ","description":"","id":37,"section":"posts","tags":null,"title":"God Might Be a Supercomputer","uri":"http://justinyhuang.github.io/posts/god-might-be-a-supercomputer/"},{"content":"Whenever I get an embedded software engineer\u0026rsquo;s resume, one thing I can guarantee is there will be definitely a line says:\nExcellent in C/C++ (or something similar)\nAnother one I am sure is someone will challenge the C++ skills of the candidate: so let\u0026rsquo;s talk about templates\u0026hellip;\nI understand why the graduates think they are qualified for C/C++ programming, and I fully agree C++ is way more than inheritance and OOP.\nWhat I don\u0026rsquo;t understand is why people believe C is simple and, relatively, easy.\nI\u0026rsquo;ve heard a humble interviewee said: I am not a C++ expert, but I know C very well.\nReally?\nLet\u0026rsquo;s test ourselves with some quick questions:\n  Based on What C standard did you write your last C program?\nYou might argue that I am showing off by asking this pedantic question.\nI\u0026rsquo;m not.\nIf you are not using C99 or later, you will not be able to write inline functions because that is not supported. You will have to put all variable declarations at the top of the start of a compound statement or the compiler will complain about the \u0026ldquo;declaration may not appear after executable statement in block\u0026rdquo; error; You cannot define a variable-length array, and you will have to define your own boolean data type - these are not provided in the pre-C99 standards. There are more.\nThis is why you need to understand what standard you are using before touching the keyboard. With the knowledge, you might solve the compilation errors easily by adding an compile option, -std=c99.\n  So I assume you use C99, which I believe is the most popular standard nowadays. What does the C keyword, restrict, mean?\nNo it is not register, I mean restrict.\nIf you have no idea or are not sure about your answer, check it out here.\nAgain one would question the point of this question: it is too esoteric, even more esoteric than the word \u0026ldquo;esoteric\u0026rdquo;!\nCalm down. Think about the applications of C today. There are good chances that you write C code for some embedded\nsystems, which are very sensitive to efficiency and the footprint of the executable image. Proper use of the restrict keyword could help the compiler to produce significantly faster executables. If you seldom consider ways to optimize your code, you might have been lucky (or unfortunate, depending on how you look at it) to work on something called embedded but doesn\u0026rsquo;t care too much about memory and efficiency, or, you might not know C very well, as an embedded software engineer.\n  How would you define an integer?\nA question, instead of an answer is expected.\nOne should ask: \u0026ldquo;How many bits of the integer we are talking about?\u0026rdquo; before writing on the whiteboard.\nAnd a statement \u0026ldquo;U32 x;\u0026rdquo; is better than \u0026ldquo;int x;\u0026rdquo;, while \u0026ldquo;uint32_t x;\u0026rdquo; is even better because that is C standard, defined in stdint.h.\n\u0026ldquo;int\u0026rdquo; is evil in the embedded system industry. The type system of C has been long disputed and it is the embedded software engineers\u0026rsquo; responsibility to make it right.\nIt is a must, but not virtue, to write clear, safe and portable code in C.\n  So, do you still think C is easy and you know it very well?\n","description":"","id":38,"section":"posts","tags":null,"title":"The Not-So-Easy C","uri":"http://justinyhuang.github.io/posts/the-not-so-easy-c/"},{"content":"对外婆的记忆大多是在放暑假的时候。\n因为爸妈都要上班又不放心我一个小孩在家，妈妈每天上班的时候就会用自行车把我载到驼背的外婆家，下班的时候再接回去。虽然已经是20多年前的事情了，其中的一些画面想起来的时候还清晰如同就在眼前。\n外婆家有一前一后两个小的房间，中间隔着一个开放的空地。外婆没有厕所，用的是痰盂。每次我都是坐在痰盂上大大，完事后由外婆弓着腰带着我去倒。外婆通常把痰盂放在空地上，痰盂的旁边就是外婆的铁笼，有时候养鸡，有时候是兔子。我大大的时候通常会偷偷地捡起身边的菜叶子喂笼子里的兔子。看着它们很高兴地吃我喂的叶子，大大的时光很快就过去了。\n外婆的邻居家有一个比我大一岁的小男孩。我到外婆家写完寒假或暑假作业后就去找他玩。我们用圆珠笔芯做小水枪，还用健力宝瓶子做大水枪。玩得不亦乐乎。到了中午，外婆就会弓着腰从屋子里走出来，然后用力挺直身子，喊我开饭。又再弓着身子和我一起进房间吃午饭。午饭不记得有什么了，不过我很喜欢外婆专门用来给我盛饭的瓷碗，上面印着火车从远处驶来的生动画面，我记得火车头还冒着浓烟。我们吃饭的旁边是外婆的小柜子，里面有一个小机械闹钟，有一只母鸡带着几只小鸡在地上啄米，母鸡的头会随着秒针的移动而不停在地上啄米。有火车碗和不停啄米的母鸡闹钟，我很喜欢在外婆家吃饭。\n外婆把前面的小房间用布帘隔成两个更小的房间，一个是客厅加饭厅，另外一个就是卧室。吃完饭外婆就会喊我睡午觉。我看见隔壁的男孩写作业的时候用的是一只很高级的铅笔，可以一直写不用按按钮也可以出笔芯的那种。中午睡觉的时候就会和外婆说。我记得外婆床上很多被单，不厚，但是都很软很暖。可惜的是已经不记得是怎么睡着又是怎样起来的了。\n到了下午晚些时候妈妈就会接我回家。有一次回家的时候，妈妈送给我一只和隔壁男孩一样的高级铅笔，因为外婆告诉她我想要。外婆说是学习用的，要买。可惜那只笔已经不知去向，不然我一定还是很喜欢用它。\n之后就很少去外婆家了。每年春节去拜年的时候，外婆总是会从床垫底下拿出红包来给我，然后叮嘱我要好好学习。外婆的红包是用一张大的红纸折的，拿在手上手指会被染红。\n后来每年的春节当我在养老院看到外婆时，她大多数时候已经听不清我的话，认不出我的人了。外婆依旧弓着腰，只是必须坐着或者躺着。她已经站不起来走不动了。\n前年除了春节，中秋的时候还回去看过一次外婆，那一次她认出了我，也听到了我说的大多数话。我想夏天或者秋天她的精神确实要好一些。\n去年回家时间很短，竟然也就没有去看外婆。\n前天是母亲节，我和妈妈通了电话。她说外婆身体越来越差了。\n昨天下午，我收到妈妈的短信：外婆去世了，当天晚上下葬。下班回到家，我终于还是没能忍住，哭了出来。\n我想你，外婆。愿您安息。\n","description":"","id":39,"section":"posts","tags":null,"title":"外婆","uri":"http://justinyhuang.github.io/posts/e5a496e5a986/"},{"content":"Printers are old ugly monsters from the last century.\nTwitter is about 6 years old and might shop for school pretty soon.\nHow would you put the two together?\nIn this post twitter is used to access the printer and to request information and services.\nThe idea is simple. Nowadays printers can easily connected to network. By implementing a twitter connector in the printer, the machine will understand how to communicate with the twitter server and then becomes \u0026rsquo;twitter enabled\u0026rsquo;. The diagram below depicts the idea.\nThe twitter connector takes care of talking to the twitter server and translate the Tweets/DMs into printer languages.\nWith the printer\u0026rsquo;s \u0026ldquo;twittability\u0026rdquo; enabled, one can register a twitter id as a proxy and connect the id to the printer.\nOnce connected, the proxy will receive and send Tweets/DMs on behalf of the printer.\nIn this way the Twitter enabled printers offer user an easier yet more powerful option to access and control:\n No extra software installation is required. Any twitter client on any platform, or the twitter webpage, will work. Status report is accessible in tweets even when the printer is offline. Printers post and \u0026ldquo;read\u0026rdquo; tweets and direct messages, which can be further customized, acting like human.  Would it be more interesting if you can talk to your printers like this?\nA demo has been built to show how to talk to a twitter enabled printer:\n ","description":"","id":40,"section":"posts","tags":null,"title":"Twitter Enabled Printer","uri":"http://justinyhuang.github.io/posts/twitter-enabled-printer/"},{"content":"面对即将来临的而立之年，过去的2011很是紧凑忙碌。日后回忆自己的29岁，想必一定要有意思得多：总结写到现在，唯独这一年，没有遗憾。\n这一年里，发生了这么些事:\n  老婆送了一把剃须刀，我开始享受刮胡子的感觉。\n  真正读了一些书。Rework, Rules of Simplicity和Being Geek都很有必要再读几次。Introduction to Algorithm依然在读，这根铁杵还得细磨下去。\n  完成了自己的第一个专利申请。没有太多的物质收入，但能在人生游戏中玩到这么一个关卡，也算是很有意思。\n  工作到现在，还是没能专精一项技术。这和大部分时间在做救火员有关，同时也要归咎于自己的毅力不足，喜欢东看看西碰碰。明年的目标是加深对内存问题和管理的理解，还有学习基本的网络知识。\n  学着平衡工作、生活和爱好。在公司就全心投入好好干活，到了家就多陪陪老婆主动帮帮忙，两头打点好了再看看书做些自己喜欢的事情。平衡很重要。\n  实现了回家两次的愿望。亲人的老去已经是事实，与其在远方不胜唏嘘还不如多陪他们吃顿饭多看会电视。\n  胜利完成婚姻一五计划。个中酸甜苦辣自知。庆祝过后，抬头看见的是更长更远更有挑战的相伴相随。\n  开始尽可能每天早上起床后跑步或是一些简单的锻炼。计划是坚持十年，看看不惑的时候会有什么收成。\n  朋友波波和大米的公司渐入佳境，迅雷哥哥也离开网易创业去了，他们为自己的梦想迈开步子去做也做到了，钦佩他们的勇气，替他们高兴；胡子和志彦分别都成了家，祝福他们一直幸福下去；还有更多的朋友也都分别结婚生子跳槽创业移民毕业。过去的一年井喷出来的是成熟与希望。\n  一位父亲的挚友因胰腺癌辞世。他一生乐观，健康生活，爱运动，学不怠，是我永远的榜样。他的提早离席，给我留下的不仅仅是难过。\n  公司再度经历重组动荡，2008年熟悉的场景和对话再次浮现。然而这次感受更多的是，真正的强者总能逆流而上。恶劣的生态往往更能让适应者生存下来，笑到最后。所以，不要怨天尤人，应该做的是提高自己适应环境。\n  认识了新的世界观。认识到人的渺小，感受到意志的伟大。有点像坐着小船开进了室外桃源：哇，原来世界如此，原来生命如此。\n  尽力做了该做的事，任性做了想做的事。\n久违了充实的感觉，很好。\n","description":"","id":41,"section":"posts","tags":null,"title":"11年记","uri":"http://justinyhuang.github.io/posts/2011-nian-ji/"},{"content":"When editing in Vim the keys that I hate most are \u0026ldquo;ESC\u0026rdquo; (Esc, Shift and CapsLock). They interrupt my thoughts when I have to find the keys far, far away from the comfort area of my fingers, not to mention the mistypes like pressing tab when I mean CapsLock.\nThere are many ways to get rid of these keys, below is my recipe.\nNo guarantee you can throw the \u0026ldquo;ESC\u0026rdquo; keys away, but I would say your fingers will stay away from \u0026ldquo;ESC\u0026rdquo; for 80% of your typing experience.\nIn your vim configuration file, .vimrc if you are in Linux, set the mappings as:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  \u0026#34;map space to @ (shift-2) for easier use the record buffer map \u0026lt;space\u0026gt; @\u0026#34;jumping among windows, with the arrow keys nnoremap \u0026lt;silent\u0026gt; \u0026lt;Down\u0026gt; \u0026lt;C-W\u0026gt;j nnoremap \u0026lt;silent\u0026gt; \u0026lt;Up\u0026gt; \u0026lt;C-W\u0026gt;k nnoremap \u0026lt;silent\u0026gt; \u0026lt;Left\u0026gt; \u0026lt;C-W\u0026gt;h nnoremap \u0026lt;silent\u0026gt; \u0026lt;Right\u0026gt; \u0026lt;C-W\u0026gt;l\u0026#34; not to even think about the \u0026lt;ESC\u0026gt; key imap jj \u0026lt;ESC\u0026gt;\u0026#34;delete a word in insert mode imap jjd \u0026lt;ESC\u0026gt;diwi\u0026#34;capitalize the first character of the current word, in Insert mode imap jjc \u0026lt;ESC\u0026gt;b~A\u0026#34; Swap ; and :, save the Shift key. nnoremap ; : nnoremap : ;\u0026#34;page down map ,j \u0026lt;C-d\u0026gt;\u0026#34;page up map ,k \u0026lt;C-u\u0026gt;  ","description":"","id":42,"section":"posts","tags":null,"title":"Keep Your Fingers Away from \"ESC\"","uri":"http://justinyhuang.github.io/posts/keep-your-fingers-away-from-esc/"},{"content":"一、二、三、四、五。相识七年，婚后五年。\n这一年我们经历了最激烈的争吵，这一年我们感受到更暖人的温情。\n在各种痒和痛中，我们继续探索婚姻的奥秘：\n磨合\n我总感叹我们是两个极端，各自有截然不同的喜好习惯乃至追求。\n直到有一天一个朋友说：iron sharpens iron. 我才知道你我的结合是上帝费尽心思的安排：\n在我脆弱的时候你坚强，在我冲动的时候你冷静，在我想法幼稚且执意某件事情的时候，你提醒我要成熟起来要考虑周全；在你哭泣的时候我给你依靠，在你构思的时候我为你执行， 在你依然不知如何改掉某个习惯的时候，我告诉你慢慢来我会等你一世一生。\n能照顾体贴自己的人固然难得，于此同时还可以直击自己短板，反射自己丑态且帮助自己成长的伴侣也许就只有一个。\n能做到这样的我，我骄傲；能找到这样的你，我感激。\n亲密\n不知道5年是不是某种意义上的轮回，我时有感觉新婚这盘久违的菜加了点什么佐料重新被盛了上来。许多刚结婚时的新鲜感转了一圈又再浮现。只是这次添了些默契，多了点依赖。只要两个人都在，家里就时刻被填满。\n这一年，我们的亲吻和拥抱超过5年总和的一半。\n厨房\n不知道这是不是天下皆知的秘密：做饭时的香味远远的就在说这里才是家；备菜的间隙时不时还可以聊聊今天的八卦。就算是争吵、冷战，也会因为到了饭点，两人就不自觉地开始厨房的协作：砧板拿出来炉灶点起来的那一刻，冰雪也开始融化。\n加班\n换了新工作后加班的频率高了很多。老婆虽有提意见但依然全力支持。\n常见的场景是：晚上回到家，第二天的饭菜已经备好，我洗澡后和老婆聊会天，上床看书睡觉。十分简单非常平淡，而要这样持续一年，两年，就变成一件不那么容易的事情。尤其妻子这样需要陪伴的性格，更是需要极大的理解和极大的爱才能做到。\n同时，籍着天赐的智慧，我也知道了要在没有工作的时候多多陪她，或看电视或打扫房间，或参考购物或一同旅游。既填充了爱的水池，又放松了自己。\n婚姻的智慧我们或许只摸到了冰山的一角，但能有不断的收获我便感激且欣慰。\n纪念日那天我们重游五年前登记的城市。熟悉的落叶，亲切的方言，路过的每一条街道，入口的每一件小吃都让人感到温馨和惬意。饭后散步时的闲聊，仿佛就像时空已经错乱，一会五年后，一会五年前。\n酒越酿越醇，爱愈提愈香。将来一路走下去，我愿意，和你。\n","description":"","id":43,"section":"posts","tags":null,"title":"木婚•五年","uri":"http://justinyhuang.github.io/posts/e69ca8e5a99ae280a2e4ba94e5b9b4/"},{"content":"The \u0026ldquo;Introduction to Algorithm\u0026rdquo; provides an pseudo-implementation of counting sort.\nCOUNTING-SORT(A, B, k) 1 for i ← 0 to k 2 do C[i] ← 0 3 for j ← 1 to length[A] 4 do C[A[j]] ← C[A[j]] + 1 5 ► C[i] now contains the number of elements equal to i 6 for i ← 1 to k 7 do C[i] ← C[i] + C[i -1] 8 ► C[i] now contains the number of elements less than or equal to i 9 for j ← length[A] downto 1 10 do B[C[A[j]]] ← A[j] 11 C[A[j]] ← C[A[j]] - 1  It works well, but still there is room for improvement.\nBelow is another version that makes counting sort a bit more faster:\nCOUNTING-SORT-2(A, B, k) 1 for i ← 0 to k 2 do C[i] ← 0 3 for j ← 1 to length[A] 4 do C[A[j]] ← C[A[j]] + 1 5 ► C[i] now contains the number of elements equal to i 6 n = 0 7 for i ← 0 to k 8 for j ← 1 to C[i] 9 do B[n] ← i 10 n ← n + 1  Start from line 6 is where the two implementations differentiate.\nwhen no optimization is taken into account.\nIn COUNTING-SORT line 6 to line 11 takes:\n k + len(A) * 2 assignments, and k + len(A) pluses  In COUNTING-SORT-2 line 6 to line 10 takes:\n len(A) * 2 assignments, and len(A) pluses  The two implementations both cost\n$$\\Omega(len(A))$$\nbut in the latter the constant k is eliminated.\nAt the end is a short python test that gives a taste of difference in real performance on my 2.8GHz Win7 laptop:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33  import time def time_elapsed(func): def wrapper(*arg): t1 = time.time() res = func(*arg) t2 = time.time() print(\u0026#34;time elapsed in %s: %0.3fms\u0026#34; % (func.__name__, (t2 - t1) * 1000.0)) return res return wrapper @time_elapsed def counting_sort(a, k): c = [0] * (k + 1) for j in a: c[j] = c[j] + 1 for i in range(1, k + 1): c[i] = c[i] + c[i - 1] b = a for j in a[::-1]: b[c[j] - 1] = j c[j] = c[j] - 1 return b @time_elapsed def counting_sort_2(a, k): c = [0] * (k + 1) for j in a: c[j] = c[j] + 1 b = [] for i in range(k + 1): for j in range(c[i]): b.append(i) return b   Sorting with counting_sort_2:\n1 2  data = [3,7,2,1,6,4,5,0] * 1000 counting_sort_2(data, 8 )   time elapsed in counting_sort_2: 22.000 ms\nWhile doing the same sort with counting_sort:\n1 2  data = [3,7,2,1,6,4,5,0] * 1000 counting_sort(data, 8 )   time elapsed in counting_sort: 36.000 ms\n","description":"","id":44,"section":"posts","tags":null,"title":"An Improved Version of the Counting Sort Implementation","uri":"http://justinyhuang.github.io/posts/an-improved-version-of-counting-sort-implementation/"},{"content":"老二在他前家很算挺大的公司写了10年程序，最后离开，到了一个学院教书，讲嵌入式设计。\n暑假的时候他被临时聘回公司做一个项目，看见以前自己的代码被糟蹋得不成样子。\n“很不爽。”我看见了他的脸在说话。\n“还是那个样子，老板会对你说出‘别设计了，写代码吧’这样的话。因为制定计划的时候就没有打算要高质量的代码，他们只要最快速度写出能用的东西。”\n“然后就开始抓人修bug，1000， 950……巴不得每个小时更新剩下的bug数目。想方设法威逼利诱底下的人加班加点解决问题，然后画一条漂亮的弧线邀功领赏。”\n“工程师前期花时间想办法设计好？那你的工作报告就会很难看。老板会接受你的解释，但是考评和奖金会告诉你他的真实想法。你如果想做个好的程序员，就以最快的速度写出能工作的代码，等着测试人员报出一堆低级错误，然后轻松的快速解决掉他们，这样一来无论工作量还是效率你都优秀得无可挑剔。管别人怎么说去，潜在的问题也不是问题，过个一两年说不定你已经不用去和这些代码打交道了：恭喜！升级！”\n看得出他的脸开始有点泛红，而老二肤色本来就不是很白。\n我递给他一瓶王老吉。\n“你呢？”我问。\n“我的表现一直平平，进度最慢的是我，解决bug最少的也是我。反正没人会去关心你的设计合不合理，也没人会认为你的bug少是好事。”\n“然后我就已经打算离职了，要在一个月内把手头上的项目做完。想也不多想地每天乱码一气，最后写出来的凑合能用，虽然问题一大堆。”\n“然后我就接二连三地收到进步奖金、上司的鼓励、上司的上司的表扬……”\n“然后我就走了”\n老二说完，打开王老吉，看了看我：“现在你知道怎样做个好的程序员了吧？”\n","description":"","id":45,"section":"posts","tags":null,"title":"程序员老二","uri":"http://justinyhuang.github.io/posts/e7a88be5ba8fe59198e88081e4ba8c/"},{"content":"In previous notes we\u0026rsquo;ve seen how messages are encrypted/decrypted from the top and middle level. Eventually we come to the very detail about how the helper functions in setRSAKeys(), and processMessage() are implemented.\n getPrime() in getRSAKeys() returns a prime. It randomly picks an integer and calls isPrime() to test if it is a prime. isPrime() makes use of ModularExponentiation() to perform the pseudo prime test.  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65  int ModularExponentiation(int a, int b, int n) { int c = 0; int d = 1; int mask = 0x8000; /*locate the most significant bit of b*/ while (0 == mask \u0026amp; b) mask = mask \u0026gt;\u0026gt; 1; while (0 != mask) { c = c * 2; d = (d * d) % n; if (0 != (mask \u0026amp; b)) { c = c + 1; d = (d * a) % n; } mask = mask \u0026gt;\u0026gt; 1; } return d; } bool isPrime(int n) { /*this function requires function ModularExponentiation(), *which assumes the input n is an odd integer greater than 2 */ if (0 == n % 2) { return false; } if ( 1 == ModularExponentiation(2, n-1, n)) { //This is, possibly, a prime, or to be accurate, a pseudoprime  if ( 561 == n) return false; // the only Carmichael number in [1, 1000]  else return true; } else { //This is definitely a composite  return false; } } void getPrime(int* prime) { int suspect = 0; do { //pick a random number  suspect = rand() % 1000; //test if it is a prime  //if yes, return  //go to the top  } while (! isPrime(suspect)); *prime = suspect; }   The modular exponentiation is to compute $$a^b$$ mod $$n$$, where $$a$$ and $$b$$ are nonnegative integers and $$n$$ is a positive integer. Here it is used to test if an input number is a prime. The test is also called primality-testing. In this note the so-called repeated squaring method, described as below, is utilized to compute the modular exponentiation:\nLet $$(b_k, b_{k-1}, \u0026hellip;, b_0)$$ representing the binary form of $$b$$. $$b_0$$ is the least significant bit. ModularExponentiation(int a, int b, int n) computes $$a^c$$ mod $$n$$ as $$c$$ is increased by doublings, from 0 to $$b$$.\nThe function returns false when the input n is a composite, and true, if n is a pseudo-prime, which is very likely to be a prime, with a few exceptions.\nThe exceptions are called Carmichael numbers. They are composites and are also pseudo-primes, but they are very rare. So rare they are that for integers less than 100,000,000 there are only 255 Carmichael numbers.\nIn this note we make lives simple and limit the participants less than 1000, in which there is only one Carmichael number, 561.\nThere are of course other ways to perform perfect prime test. Miller-Rabin randomized primality test, for example, overcomes the \u0026ldquo;fake prime\u0026rdquo; problem that we have in the method above. Again to keep this note short we simply use the Modular Exponentiation method.\nWith a method for primality test, in the code above a random number is picked and tested.\nBut how many numbers should we pick until a prime is found? Is there a way to estimate the density of primes given the integer range?\nYes, by the Prime number theorem: $$lim_{x \\to \\infty} \\frac{ \\pi(n)}{n \\ln n} = 1$$\nthe number of primes equal or less than $$n$$ is approximately $$\\frac{n}{\\ln n}$$\nSo before we can find a 1024-bit long prime, we will need to test about $$\\ln 2^{1024} \\approx 709$$ numbers, and if we skip checking the evens, there are only 354 candidates to test.\nBack to our little simple case, we will get a prime, oh, a pseudo-prime, after trying about $$\\frac{\\ln 2^{9}}{2} \\approx 3$$ times, not bad ha?\nAfter getting the required primes, two functions, gcd() and Extended_Euclid(), are used in setRSAKeys() to get $$e$$ and $$d$$.\nThe functions gcd() produces greatest common divisor of two integers. $$e$$, relatively prime to $$\\phi(n)$$, is generated by this function:\n1 2 3 4 5 6 7  int gcd(int a, int b) { if (b == 0) return a; else return gcd(b, a % b); }  \nI was thinking a simple while loop would be more efficient than the recursion version, but comparisons in C doesn\u0026rsquo;t show any benefit\u0026hellip;\nAfter playing with some numbers and I realized that: 1. when a = b, the recursion terminates. 2. if a\u0026gt;b or b\u0026gt;a, the number of recursions is still reasonably small.\n(and as it proves later in the book:(Lamé\u0026rsquo;s theorem)\nfor any integer $$k \\geq 1$$, if $$a \u0026gt; b \\geq 1$$ and $$b \u0026gt; F_{k+1}$$,\nthen the call Euclid(a, b) makes fewer than k recursive calls.),\nwhere $$F_{k}$$ is the Fibonacci numbers.\nExended_Euclid() are based on the Euclid\u0026rsquo;s algorithm and it\u0026rsquo;s extended version:\nGiven the input of $$a$$ and $$b$$, returns $$d$$, $$x$$ and $$y$$, where integers $$a$$, $$b$$, $$d$$, $$x$$, and $$y$$ satisfy:d = gcd(a, b) = ax+by\nThis function is used here to calculate modular multiplicative inverses, $$d$$.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  typedef struct euclid_coefficients { int d; int x; int y; } euclid_coefficients; euclid_coefficients ec; euclid_coefficients Extended_Euclid(int a, int b) { if (b == 0) { ec.d = a; ec.x = 1; ec.y = 0; return ec; } euclid_coefficients tmp; tmp = Extended_Euclid(b, a % b); int old_x = tmp.x; tmp.x = tmp.y; tmp.y = old_x - a/b*tmp.y; return tmp; }    The last step is to use the key to encrypt/decrypt the message:  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37  long powerMod(long x, int n, int y) { if (1 \u0026gt; n) { return 1; } if (x \u0026gt; y) { x = x % y; } long tmp = 1; while ( n \u0026gt; 2 ) { n -= 2; tmp = ((x * x) % y) * tmp; tmp %= y; }; if (2 == n) { tmp = (x % y) * tmp; } tmp = (x % y) * tmp; tmp %= y; return tmp; } void processMessage(long* msg, key key, int len) { int i; for (i = 0; i \u0026lt; len; i++) { msg[i] = powerMod(msg[i], key._key, key.n); } }   After all, we\u0026rsquo;ve built a simple encryption/decryption tool.\nTime to have some fun\u0026hellip;\n1 2 3 4 5 6 7 8 9 10 11  ~/EncryptionAndDecryption/\u0026gt; test p = 61, q = 881 n = 53741, phi(n) = 52800 e = 7 d = 7543 the encrypted message: [~] [▒] [▒] [▒] [] the decrypted message: [h] [e] [l] [l] [o] ~/EncryptionAndDecryption/\u0026gt;  ","description":"","id":46,"section":"posts","tags":null,"title":"Encryption and Decryption - Note of Fundamental Number Theory III","uri":"http://justinyhuang.github.io/posts/encryption-and-decryption-note-of-fundamental-number-theory-iii/"},{"content":"The first thing we need to do in the main function is to prepare two groups of keys.\nThe function setRSAKeys() helps to generate a public/private key pairs:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42  int setRSAKeys( key* publickey, key* privatekey) { //generate two 512bit primes p and q  int p, q; srand((unsigned)time(0)); getPrime(\u0026amp;p); getPrime(\u0026amp;q); //printf(\u0026#34;p = %d, q = %d\\n\u0026#34;, p, q);  //calculate n and phi(n)  int n, phi_n; n = p * q; phi_n = (p - 1) * (q - 1); //printf(\u0026#34;n = %d, phi(n) = %d\\n\u0026#34;, n, phi_n);  //calculate e, a small odd relatively prime to phi_n  int e = 1; do { e += 2; } while (1 != gcd(e, phi_n)); //printf(\u0026#34;e = %d\\n\u0026#34;, e);  //calculate d, the multiplicative inverse of e, modulo phi_n  euclid_coefficients ec ; int d; ec = Extended_Euclid(e, phi_n); d = ec.x; if (0 \u0026gt; d) { d += phi_n; } //printf(\u0026#34;d = %d\\n\u0026#34;, d);  //return (n, e) and (n, d)  publickey-\u0026gt;n = n; publickey-\u0026gt;_key = e; privatekey-\u0026gt;n = n; privatekey-\u0026gt;_key = d; return 0; }   In the function above, two primes are picked to compute $$n$$, which in reality is a gigantic number because $$p$$ and $$q$$ are big primes, say 1024 bits each. (again in this note we simplified the case by using small integers)\nThen $$e$$ and $$d\\ =\\ \\phi(n)$$ are obtained to form the primes: $$e$$is a small odd integer and falls into the public key set. $$d$$, another big number calculated based on $$n$$, is not very easy to guess (or reversed-engineering), and is therefore put as part of the private key set.\nEuler\u0026rsquo;s phi function: $$\\phi(n)=n\\ \\displaystyle\\prod_{p|n} \\left(1- \\frac{1}{p}\\right)$$\nwhere $$\\phi(n)$$is the size of $$\\mathbb{Z}_{n}^*$$, $$p$$ runs over all the primes dividing $$n$$(including $$n$$itself, if $$n$$is prime, too)\n$$\\mathbb{Z}_{n}^*$$is the multiplicative group modulo n, or defined as\n$$\\mathbb{Z}_{n}^* = {[a]n}$$in $$\\mathbb{Z}{n} : gcd(a,n) = 1$$\nwhere $$[a]_{n}$$= $$a\u0026rsquo;$$mod $$n$$, $$a\u0026rsquo;$$in $${Z}$$\ne.g. $$\\mathbb{Z}_{15}^*\\ =\\ {1, 2, 4, 7, 8, 11, 13, 14}$$, $$\\phi( 15 ) = 15 ( 1 - \\frac{1}{3} ) ( 1 - \\frac{1}{5} ) = 8$$\nWhen we select $$p$$ and $$q$$, which are primes and $$n\\ =\\ pq$$, The phi function becomes $$\\phi(n)\\ =\\ (p-1)(q-1)$$ , much easier now =)\nAt the end of the above function we have set two groups of keys: the public key $${e,\\ n}$$and the private key $${d,\\ n}$$\nWith the public and private keys, encrypting and decrypting a message becomes easy.\nGiven a message $$M$$, to encrypt $$M$$we do: $$M^e\\ mod\\ n$$\nthe outcome of which, $$S$$, is the encrypted message.\nTo decrypt the secret, $$S^d\\ mod\\ n$$ will give you the original message.\n$$d = e^{-1}\\ mod\\ \\phi(n) = e^{-1}\\ mod\\ ((p-1)(q-1))$$ guarantees for the given $$p$$, $$q$$and $$e$$there will be a unique $$d$$. Therefore for a given public key $${ e,\\ n }$$, there will be one and only one private key $${ d,\\ n }$$. This is exactly what we want!\nOn the other hand, $$(M^e\\ mod\\ n)^d\\ mod\\ n\\ =\\ M^{ed}\\ mod\\ n\\ =\\ M$$ promises the encryption and decryption are irreversible operations.\nTo be continued\u0026hellip;\n","description":"","id":47,"section":"posts","tags":null,"title":"Encryption and Decryption - Note of Fundamental Number Theory II","uri":"http://justinyhuang.github.io/posts/encryption-and-decryption-note-of-fundamental-number-theory-ii/"},{"content":"Reading the number theory has taken me a while.\nAnd I guess, possibly, the most useful application of number theories is information encryption/decryption and digital signatures.\nThis note lists the essence of elementary number theory (well at least I think so), by showing how basic encryption/decryption and digital signatures is done.\nHere we go\u0026hellip;\nThe public-key cryptosystem is based on the dramatic difference between the ease of finding large prime numbers and the difficulty of factoring the product of two large prime numbers.\nEach participant in the system has a public key or/and a secret key. There are many algorithms for the public-key method, the RSA public-key cryptosystem is one of them. In the rest of this note we will only focus on the RSA method.\nWhen applied in an encryption/decryption scenario, usage of the keys is depicted as below:\nPlain Message \u0026mdash;Public Key\u0026mdash;\u0026gt; Encrypted Message\nEncrypted Message \u0026mdash;Secret Key\u0026mdash;\u0026gt; Plain Message\nNo one will be able to get the plain message from the encrypted one except for the one who holds the secret key.\nEveryone who has the public key will be able to send the encrypted message to the secret key holder.\nWhen applied in a digital signature case:\nPlain Message \u0026mdash;Secret Key\u0026mdash;\u0026gt; Signed Message\nSigned Message \u0026mdash;Public Key\u0026mdash;\u0026gt; Plain Message\nNo one will be able to produce a \u0026lsquo;fake\u0026rsquo; message with the same digital signature.\nEveryone will be able to read the plain message sent with digital signature, as long as they have a public key.\nWhen combining the two above, one can send a signed and encrypted message.\nBut how to make the keys and how the keys work?\nIn reality RSA requires playing with very big numbers, something like 1024-bit integers. For the sake of simplicity we are not going to stick with those big fat digits, instead small numbers are used just to show how things work. For serious code, you may find the GMP library interesting.\nOK, let\u0026rsquo;s get our hands dirty with some C code.\nFirst the top main function:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31  typedef struct key { int n; int _key; } key; #define MESSAGE_LENGTH 5  int main(void) { /*prepare the keys*/ key publickey, privatekey; setRSAKeys(\u0026amp;publickey, \u0026amp;privatekey); /* use long here to hold the encrypted message */ long message[MESSAGE_LENGTH] = {\u0026#39;h\u0026#39;, \u0026#39;e\u0026#39;, \u0026#39;l\u0026#39;, \u0026#39;l\u0026#39;, \u0026#39;o\u0026#39;}; /* Encryption - process message with the publickey */ processMessage(message, publickey); printf(\u0026#34;the encrypted message:\\n\u0026#34;); printMessage(message); printf(\u0026#34;the decrypted message:\\n\u0026#34;); processMessage(message, privatekey); /* prints the outcome */ printMessage(message); return EXIT_SUCCESS; }  ","description":"","id":48,"section":"posts","tags":null,"title":"Encryption and Decryption - Note of Fundamental Number Theory I","uri":"http://justinyhuang.github.io/posts/encryption-and-decryption/"},{"content":"老二吃饭后总是第一时间洗干净碗筷。\n“为什么不喝喝茶休息一下再去洗？”我有一天忍不住问。\n“在最好洗的时候洗，这些东西放久之后却需花更多力气了。”\n转眼间他已经在擦手，走了过来，“现在水刚烧开，可以喝茶了，哈哈。”\n嗯，太多的时候我们总是会由着所谓的心情或感觉去回避或拖延那些应该马上就该做的事，结果只是一拖再拖。或是等到不能再等的急迫，或是拖到无需再拖的错过。几乎所有的后悔，都因曾经的任性。\n嗯，今天开始，吃完饭洗碗，水烧开喝茶。\n","description":"","id":49,"section":"posts","tags":null,"title":"老二洗碗","uri":"http://justinyhuang.github.io/posts/e88081e4ba8ce6b497e7a297/"},{"content":"自第一次给自己写年记已经是第七年，中国人有说法“七”是一个带来转变的数字。好像是这样的。\n过去的年度总结或是遗憾自己依旧没有进步，或是罗列诸多没有完成的事情。总之就是364天都没好好过，到了最后一天才来后悔。\n这回终于可以写些不一样的东西。\n10年初重返老东家，回到熟悉的碧波路690号。新的开发模式让每个工程师可以同时在不同的产品的不同阶段工作，不再有项目组的概念；一项功能的描述只有一句话，剩下的自己搞定；现有的代码没有文档，代码就是文档；一个功能没有可以咨询的专家，新来的你就是专家。不知道这是不是所谓的敏捷，但是是我喜欢的方式；组里召回的都是资深行家，最年轻资历最浅的我闭眼挑谁都是师傅，这也是我选择吃回头草的原因。因此能揽多少活就揽多少活，能加几天班就加几天班。若拙只能以勤补，那么以前对自己说过的“期待艳遇的人，就要不断地往女人堆里钻”，我想自己已经在这样做了。\n玩也玩了不少。一年里我们爬普陀，钻拱门，冷三番，热赌城，看了朋友，喝了咖啡。实在够了。\n第四年的婚姻生活回忆起来全是感激，2010年的收获是全新的婚姻智慧与哲学，我想从此我们便有了近乎无穷的动力去爱对方。这一段说的太多反倒觉得无力，还是用两句话来总结并供日后回味：\nGive, and it will be given to you. 出自这一本书\nLove is a choice.\nLove is something you do for someone else, not something you do for yourself. 出自这本书\n父亲因为工作来过上海几次，每次见面都会看到时间在他身上划下新的痕迹。不知道我这次回家看望外婆是不是依然控制不住自己的情绪，但我知道面对渐渐老去的亲人，我们能做的和他们要求的，都只会越来越少。今年春节，希望能在短暂的时间里带给他们哪怕一丁点的快乐和慰籍。\n工作和家庭已经占据了我绝大部分的时间，这让2010年的学习项目执行得非常困难。虽然也完成了一些读书计划，但不是小说就是一些温故知新类的书籍。几本大部头的进度显然落后了一大截。而除去读书外想做的事情就更是心有余而力不足。不过有得必有失，凡事不能面面俱到照顾周全。能有哪怕一丝时间可以给我利用，有哪怕一点点的精力让我继续，就可以了。面对面前的一根根粗铁棒，我可以慢慢磨下去。\n总之今年做了两件事：应该做的和想做的。\n忙而不乱，一零年没白过。\n","description":"","id":50,"section":"posts","tags":null,"title":"一零年记","uri":"http://justinyhuang.github.io/posts/e4b880e99bb6e5b9b4e8aeb0/"},{"content":"老二是我的学长，以往暑假的时候都会借他用过的书来预习下一年的课文。\n记得在过去校园风行写诗的时候，曾在老二的课本上看见过：\n”一辈子\\做\\自己想做的\\和\\应该做的\\然后\\才有资格\\笑\\在那么多哭泣的脸面前\\离开“\n当时觉得这家伙又在课堂上走神强说愁了，一句话随意断句换行就称诗，还不押韵！我告诉他读者的感受，结果是我被威胁以后若再贬低他的创作就再也不要找他借书了。\n虽然这样，我还是不停笑他的诗包括情诗，老二也还是在考试结束后就把所有的课本资料自觉地转送给我。\n也许是因为他的作品确实太多，我至今仍记得那么几句甚至是某篇。\n这首短诗是记得最清楚的，因为时常想起。\n”应该做的和想做的“，离开校园也有好几年，有时想想人需要做的不就这两样么。\n先做好应该做的，不管想或不想做，这是履行义务；然后做想要做的，无论应该不应该，这是享受权利。\n不能贪得无厌的索取，也毋须呕心沥血的付出。\n先往左一丿，再往右一㇏，人字写成。于是面对那么多人的不舍，你可以坦然笑着离开。\n世道复杂，世理简单。而当我最近开始这样做的时候，才觉得：当时不应该笑话老二的诗的……\n","description":"","id":51,"section":"posts","tags":null,"title":"老二的诗","uri":"http://justinyhuang.github.io/posts/e88081e4ba8ce79a84e8af97/"},{"content":"戴上戒指后的第四年，左手无名指已经长出一圈浅浅滑滑的凹痕，总会习惯性地不时用拇指去摸它。\n每次发现戒指不在了，马上会去找到并戴起来。因为，你的手上戴着另外一只。\n第四年对彼此的了解，比两年前杀人游戏的默契多一点，较去年模式化的争吵深一些。\n你知道我喜怒无常，说变就变情绪化；你知道我做事丢三落四，尽管你再三叮嘱我还是会转头就忘；你也知道我总是愚孝，父母的话不加分析就言听计从。\n我知道你的自尊心很脆弱，每次理亏的时候都不会再说话；我知道你的毅力极差，虎头蛇尾的你总是三分钟热度坚持不下去；我还知道你没有生物钟，睡觉和起床的时候从来不可预测。\n深知对方的缺点和短板，你我都想要帮助对方改正，但又都听不进各自的“金玉良言”：你自己还没做好呢，凭什么来说我？\n前所未有的默契竟也能带来两个人的战争，各打各的旗帜，各说各的语言。\n于是开始有些觉得爱得乏力，于是对对方的要求愈加多于对自己的鼓励。\n4年的相处与相待、相爱与相伤，我们的爱加加减减。\n如果说是双方的优点吸引了彼此，那么当过了爱屋及乌的时候，就需要更多的婚姻智慧来教我们学会包容对方的缺陷。\n值得感激的是在相同的一年里我们找到了新的源泉，因有它，我们获得无穷的动力和能量去给予对方无私的爱。\n某日在回家的路上它告诉我，婚前恋爱的热度就是婚后生活中爱的标杆：如果你现在对她没有恋爱时那样重视和珍惜，你就应该检讨你自己。\n于是我争取把加班都放在工作日，并在周末张罗三餐饭菜，这样能让你休息的同时还可以体会到其实你在家里操劳家务也确不易。\n于是你每天早上都跑市场买新鲜菜肉，这样我就不用再吃冷冻的食物，你也在努力培养规律的作息。\n两个人的生活有了新的动力和生机。\n而举再多的例子也显乏力。能用新的定义和方式去爱你，我想这是今年最大的收获之一。\n丝婚的那天，你和我布置了一桌丰盛的海鲜无米粥火锅——两个人的结婚酒席。\n屋外瑟瑟寒风夹杂着乱飘的雨，家里热气腾腾的火锅吃得很暖很晚。\n后记：写完后重新读了一遍，才知道第四年我们的主旋律原来是：吃。\n几乎通篇都和吃有关，也真的算是以食为天了……\n","description":"","id":52,"section":"posts","tags":null,"title":"丝婚-两个人的结婚酒","uri":"http://justinyhuang.github.io/posts/e4b89de5a99a-e4b8a4e4b8aae4babae79a84e7bb93e5a99ae98592/"},{"content":"老二说话言简意赅，有时候很讨厌，但大多数时候却是很讨人喜欢。\n于是局里偶有女孩对老二颇有好感，尽管他的儿子都已经可以背出方文山的词了。\n有女C约老二喝茶暗示爱意。\n老二翻看报纸的时候问：你小时候一定爱抄别人作业吧？\nC不知所云，用崇拜的眼神等待男人的下一句。\n按原样叠好看过的报纸，老二说：我那儿子就自己写。\nC笑而不语。\n茶毕，老二买单。\n半年后，C和新男友请全局同事外出烧烤，老二不无遗憾的说：我得看儿子写作业……\n","description":"","id":53,"section":"posts","tags":null,"title":"老二与作业","uri":"http://justinyhuang.github.io/posts/e88081e4ba8ce4b88ee4bd9ce4b89a/"},{"content":"今年很重要的一个指标就是“重婚”：三年之痒后我们打算再结一次重燃爱火。\n于是周末之外又请了一天假，我们杀到赌城，结婚。\n按照计划，结婚小分队携款游击Strip上各大赌场，希望有所斩获，得来的横财可以办场盛大的婚礼。\n和计划中的一样，我们输光了所有的赌资，高高兴兴地找了家小办事处登记结婚。\n同行的杰西同学欣然接受了证婚人的使命，并兼全程即兴摄影师。（感谢感谢……）\n简单却庄重的仪式之后，我们“又一次成为了夫妻”～\n","description":"","id":54,"section":"posts","tags":null,"title":"“重婚”赌城","uri":"http://justinyhuang.github.io/posts/e2809ce9878de5a99ae2809de8b58ce59f8e/"},{"content":"These days I have been working on some coding stuff, and was stuck in some stupid, yet interesting defects.\nHere are two of them, that I still remember:\n1 2 3  //..  if ( 0x2400 \u0026amp; 0x2000 != 0 ) printf(\u0026#34;you know this must be true...\\n\u0026#34;); //..    The above is an abstraction from codes of one of my projects.\nAt the moment of coding I believe I certainly will see the line prints.\nAfter I see nothing I believe there must be something wrong with my eyes.\nThen I went to the restroom, took some water, and return to my seat.\nAha! I suddenly realized how mind absent I was:\nthe operator \u0026amp; is below != in the precedence table, which means 0x2400 \u0026amp; 0x2000 != 0 is actually 0x2400 \u0026amp; ( 0x2000 != 0 ) !\nWell, I bet this precedence problem is just a piece of cake for a college student (or even a high school boy).\nBut when it comes to real life and real code\u0026hellip;\nHmmm, I believe, truely, I need reviewing some of the text books.\nI can feel the disdain on your face ;-), so here comes a little bit more interesting one: (again it is a make-up model of the real code)\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  #define E_NOTIMPL 0x01234567  //..  class Base { public: virtual int foo() = 0; int newfoo() { return E_NOTIMPL; } //..  } class Derived : public virtual Base { public: virtual int foo() {printf(\u0026#34;Derived foo\\n\u0026#34;); return 0;} virtual int newfoo() {printf(\u0026#34;Derived newfoo\\n\u0026#34;); return 0;} //..  } int main() { Derived d; Base* pb = \u0026amp;d; pb-\u0026gt;foo(); pb-\u0026gt;newfoo(); }   The problem of the code above is, i can\u0026rsquo;t get the \u0026ldquo;Derived newfoo\u0026rdquo; at all. What is even quirky is, in my debugger I see no execution point in the line pb-\u0026gt;newfoo();, which means line 24 doesn\u0026rsquo;t even execute!\nAnd again I had some (more) water and returned to the code:\nin line 07 the keyword virtual is missing, thus there is no virtual table entry in the Base object, thus Derived::newfoo() can never be invoked\u0026hellip;\nbut why line 24 is not executed?\nbecause the code for an ARM platform has been compiled with specialized optimization and line 24 was skipped!\nThis is the whole story about bug fixing and, water drinking.\nApparently there is still a long way for me to grow into a competent programmer\u0026hellip;\n","description":"","id":55,"section":"posts","tags":null,"title":"Note on a Few Defects","uri":"http://justinyhuang.github.io/posts/note-on-a-fe-defects/"},{"content":"一个月前趁着独立日的档期，混到三番乱游了几天。\n第一感觉就是乱。\n街头上空永远横七竖八排着一堆的电线，唐人街乱摆着夫子庙城隍庙才卖的劣质商品，九曲花街上乱开着各式各样的车，到了晚上还有不少异族在街上乱晃。乱，实在是乱。\n但要说一无是处也过分了些。\nSFMOMA还是值得一看，美国现代艺术在此可见一斑。在Guardians of the Secret跟前看了很久不知所云，幸而某团导游带队在画前重点解释了一通，才知道内藏玄机，而真正的秘密究竟是什么，还真的不知道什么时候才能被揭晓。\n金门桥在我们去的那天还是深锁在雾中，看着觉得也就那样，骑车上了桥才知道西太平洋的风有多大（在荷兰两年都没有见过那么大的风）。站在桥中央目送那些出海的货船，它们就这样慢慢地驶向无边的太平洋，消失在雾里。每次面对大海的时候都会暗自感叹人的渺小，伴随着那么一丁点的恐惧。一来一回骑到了原点，累得不行。\n最后还是去了斯坦福。做不了牛人，也要到牛人堆里YY一小会。见到David和William资助的两栋楼时，自然也要拜拜，留个影纪个念：说什么也算是沾亲带故了:)\n总体感觉所谓的国际都市都没什么吸引人的，还是小城镇宜人且安居乐业。于是乎当我们回到小土豆城Boise的时候，发现更是爱上这种平淡简单的生活。\n","description":"","id":56,"section":"posts","tags":null,"title":"去了三番","uri":"http://justinyhuang.github.io/posts/e58ebbe4ba86e4b889e795aa/"},{"content":"趁着Momenrial Day有一天假期，外加周末两天，我们蹭了同事的车一路往南杀到了犹他州的拱门国家公园(Arches National Park)。\nArches实际上是一片海拔比较高的沙漠，大概有1500米。特殊的地理结构，经过长期的风蚀和雨蚀，就变成了世界上拥有最多自然石拱门的地方。\n公园里可以行车，但也保留了绝大部分原态的地貌，于是很多景观都需要步行才能看到。整个公园已经预先设计好了可以徒步行走的很多小路(trail)，短的半小时就走完了，长的仅仅是单程也需要8小时以上……\n没有能够走完全部小路，雯和我只走了最短的Park Avenue和最著名的Delicate Arch。后来雯的脚底也起泡了，我们便在Devil Garden(需要4～5小时完成)入口处一边望洋兴叹一边聊天休息过了一个下午。\n面对千百年后形成的石拱门，除了好看，却也没有什么其他的感叹。倒是一路上见到不少父母背着还不会走路的小孩徒步爬山，很是佩服。\n没有很深刻的意义，没有很难忘的情节，当然，也没有熟悉的人山人海。只是边走边聊，顺带看看那些在资料里颇为壮观的景色。\n嘿嘿，就算是到拱门国家公园一游了。\n","description":"","id":57,"section":"posts","tags":null,"title":"去了拱门国家公园","uri":"http://justinyhuang.github.io/posts/e58ebbe4ba86e68bb1e997a8e59bbde5aeb6e585ace59bad/"},{"content":"One of my reading projects is to work on the Introduction to Algorithm.\nAfter a few chapters I realized that I might have already forgot all little pieces of mathematics learned in college.\nThis note shall keep me aware of the asymptotic notations frequently used in the algorithms:\n$$f(n)=\\Theta(g(n)) \\Leftrightarrow c_{1}g(n) \\le f(n) \\le c_{2}g(n)$$\n$$f(n)=O(g(n)) \\Leftrightarrow 0 \\le f(n) \\le cg(n)$$\n$$f(n)=\\Omega(g(n)) \\Leftrightarrow 0 \\le cg(n) \\le f(n)$$\n$$f(n)=o(g(n)) \\Leftrightarrow \\lim \\limits_{n \\to \\infty} \\frac{f(n)}{g(n)}=0$$\n$$f(n)=\\omega(g(n)) \\Leftrightarrow \\lim \\limits_{n \\to \\infty}\\frac{f(n)}{g(n)}=\\infty$$\nTo make the notations easier to remember/understand, the book gives the following loose analogies:\n$$f(n)=\\Theta(g(n)) \\approx f(n) = g(n)$$\n$$f(n)=O(g(n)) \\approx f(n) \\le g(n)$$\n$$f(n)=\\Omega(g(n)) \\approx f(n) \\ge g(n)$$\n$$f(n)=o(g(n)) \\approx f(n) \u0026lt; g(n)$$\n$$f(n)=\\omega(g(n)) \\approx f(n) \u0026gt; g(n)$$\n","description":"","id":58,"section":"posts","tags":null,"title":"Asymptotic Notation","uri":"http://justinyhuang.github.io/posts/asymptotic_notation/"},{"content":"五一最后一天去看了《叶问2》。\n作为一部武打片，看不到什么打斗动作的新意，甄子丹的“机关枪拳”在《叶问》里还算效果不错的，不过到了《2》好歹也该有些创新吧，可惜没看到；很多打斗场面的画面剪接也不清晰，我看的可是正二八经的宽银幕大电影，却没办法看出谁打谁，怎么打的。只有几块肉晃来晃去……\n于是在影院的时候就可以分神想些其他的东西：\n类似《叶问》的电影在国人消费群中颇有市场，是不是可以理解为我们的自信心到了空前低落的程度：只能靠“哼哼哈兮”的场面来打鸡血才能看到作为中国人的骄傲和自豪？\n如果到了只有中国功夫(且不论电影里的是不是真的功夫)才能让国人抬起头的地步，我们还有必要借助功夫片这种春药来意淫中华的崛起吗？\n我猜想影片的本意应该是要宣扬叶问在最后说的人性平等相互尊重，不过我也在猜想多数受众的印象大概只是“叶问的功夫很厉害，所以最后打赢了”。以德服人，现在真的变成笑话了。\n中国人的血液被注入了太多的暴力因素，无论言语上还是动作上心理上。身边的诸多事件都能用这个解释。虽然我在这里写这句话，但是不能否认自己在看到激烈的打斗时，四肢也会有难以控制的激动，感觉自己就是里面的主角，痛打仇敌很过瘾。从小看武打片的后遗症。\n我想今天的电影票买得不是很值。\n","description":"","id":59,"section":"posts","tags":null,"title":"看了《叶问2》","uri":"http://justinyhuang.github.io/posts/e79c8be4ba86e58fb6e997ae2/"},{"content":"周末出门，偶尔会碰到老二的老婆出街溜老公。\n老二倒似很享受出来放风逛街的过程。\n再一次看到老二的时候不禁向他讨教如何把陪逛街变成一件趣事。\n于是得到老二经验真传，原来逛街的时候可以：\n  学习英语。超市或是商店里很多商品都会有英文对照翻译，从中可以学到柴米油盐的英文说法，可以了解喇叭裤紧身衣的西洋名称。一来二去，也算小开眼界。\n  卡拉OK。身边各式音乐不断，真正逛街买东西的人几乎无暇顾及，不过陪逛的人就可以好好享受了：超市播放的一般都是经典金曲，服饰店里总是可以听到热榜新歌。趁这个时候练习，真正K歌的时候就可以小露一手。\n  锻炼身体。到了超市第一件要做的事，就是选一辆好的购物车。因为它是你接下来1个小时的健身器材。它是双杠又是滑轮车，加上超市劲爆的音乐和复杂的路况，绝对让你下次还想来。\n  以此类推，娱乐之余别忘了和夫人聊天，不然下次她就不带你出来玩了。\n  嗯，这个周末我也实践一把……\n","description":"","id":60,"section":"posts","tags":null,"title":"老二陪逛街经验谈","uri":"http://justinyhuang.github.io/posts/e88081e4ba8ce999aae9809be8a197e7bb8fe9aa8ce8b088/"},{"content":"@中国上海张江地铁站\n臭豆腐摊\n一句不显眼但是很强悍的广告词：\nSmell Smelly, taste tasty\n看到后不得不佩服，短短4个词，已经远远超出了原句“闻着臭，吃着香”的意境：\nsmell和taste是整句的一对核心，闻和吃是品尝臭豆腐的两个步骤；\nsmell和taste变成smelly和tasty后截然相反的含义刚好用来形容香臭结合的豆腐；\nsmell-\u0026gt;smelly和taste-\u0026gt;tasty是系动词变化后成为形容词的仅有两个例子，突出豆腐的独特；\nsmelly和tasty的韵脚一致，是广告词朗朗上口，口口相传的必备条件\n……\n只能说，人才啊……\n摊前生意太好，总是一堆人，于是借用一下这里的照片……\n","description":"","id":61,"section":"posts","tags":null,"title":"史上最强的臭豆腐广告语","uri":"http://justinyhuang.github.io/posts/e58fb2e4b88ae69c80e5bcbae79a84e887ade8b186e88590e5b9bfe5918ae8afad/"},{"content":"那日和朋友聊到最近的改变，他说，好好加油吧，我就等着看你的年度总结了。\n有点吓到我：原来还有人预订总结的。好吧，过了09就总。\n将至元旦，MSN的更新提示不断的弹出大家的总结日志。\n看来09是个大家都要记录的年份。09一定要结。\n今天解决完09最后一桩事，在事实上进入了2010。\n嗯，可以总结了。\n7注定是和我很有一腿的数字，而这是我滑出母体第27年。也许正因如此，09也较过去多些可以记录的东西。\n在悲情的2008被迫“跳槽”后，原地满血复活般重注热情，投身新革命。\n培训了一年，却因为这个或那个原因，没能真正为公司写一行代码：这是程序员的耻辱。\n或可庆幸的是，这也许是09的唯一缺憾。\n得益于公司的闲适日子，我得余力以思考诸如人生和快乐等抽象命题。花了些时间，虽然没有完全参透怎样的人生方才算是快乐的，但也或有收获：\n  开始重新看书。有想法是不够的，付诸行动才是王道。在感叹“好久没读书了”那么多年后，09年终于可以开始继续读书学习。感觉很好，很开心。\n  决定换掉工作。经济环境并非大好，公司老板待我不错。不过报道上网喝茶等下班拿工资的好日子还轮不到我来过，欠了好几年，要学要练的东西太多太多。\n  过好工作以外的生活。五一的时候洗脸刷牙顺带树立了“要活得像一块大豆腐”的崇高理想，很是兴奋了一把。努力工作之余，休息是需要保证的，娱乐是必不可少的，家务活动能帮就帮，业余爱好也要培养和保护。即便不能活得精彩，但也别留太多遗憾。\n  一年回了家两趟，表弟有了女儿我们也顺带升了级，父母长辈的衰老已经看得出来，奶奶病痛不断而姥姥却已经只能躺在床上而且辨认不出我来……\n我想与时间同行者是很难体会被时间抛下的人的感受的。哪怕亲见，恐怕也只是同情或是感伤。但无论如何，多陪陪他们吧。\n婚姻学堂读到三年级，感谢陪伴我学习成长的老妻，我们一起递上期末考试成绩。\n在过去的那个不折腾元年里，从个人到国家到老天爷，没有一个不在勤勤恳恳地折腾。\n以往还可以安慰自己“宁向冠希学英文，莫谈国事”，然而现在的冠希们连中文的说法都不给了。\n不容遗忘的纪年。在这个即将拥有世界最大局域网的文明国度，我依然无耻地做着安份良民。但求有一日自己能做的，不仅仅是默默地简单悼念。\n写到这里想想其实还有很多未完成的2009，但既然还未完成，就先压着。毕竟这篇仅是总结，寄希望于未来一、二年后能写进来。\n","description":"","id":62,"section":"posts","tags":null,"title":"09总结","uri":"http://justinyhuang.github.io/posts/09e680bbe7bb93/"},{"content":"老二上厕所。\n推开门：靠……前面的家伙没有冲水！\n转头到隔壁：靠……这个也没冲而且更不堪……\n于是还是回到第一间冲干净，继续五谷轮回。\n坐在马桶上，老二自言自语：\n嗯，凡事不要轻易放弃，否则后面可能有更大的困难\n嗯，出来混，总归要还的。\n嗯……\n","description":"","id":63,"section":"posts","tags":null,"title":"老二上厕所","uri":"http://justinyhuang.github.io/posts/e88081e4ba8ce4b88ae58e95e68980/"},{"content":"A recommendation is always better than a concern.\n“If you are 9-5, you have a problem”\n“There is no cry of pain without, at its end, an echo of joy”\n不怕像虎一样的对手，也不怕猪一样的队友，怕只怕在自己脑门上画个“王”的猪队友……\n国人最为可悲之处在于：在属于程序性的领域积极创新谋求突破，在属于创造性的领域原地踏步遵守程序。这样的69最终是毁灭性的。\n书非电子版不能读也。\n学习可以中断，但是不能终止。\n","description":"","id":64,"section":"posts","tags":null,"title":"一些零碎的记录","uri":"http://justinyhuang.github.io/posts/e4b880e4ba9be99bb6e7a28ee79a84e8aeb0e5bd95/"},{"content":"Since I have children,I try to spend evenings with them sometimes. The rhythm that works best for me is to work a very long day, sleep in the office or near the office (I have a long commute from home to work) then go home early enough the next day to spend time with my children before they go to bed. I am not comfortable with this, but it is the best compromise I have been able to work out. Go home if you have a contagious disease. You should go home if you are thinking suicidal thoughts. You should take a break or go home if you think homicidal thoughts for more than a few seconds. You should send someone home if they show serious mental malfunctioning or signs of mental illness beyond mild depression. If you are tempted to be dishonest or deceptive in a way that you normally are not due to fatigue, you should take a break. Don’t use cocaine or amphetamines to combat fatigue. Don’t abuse caffeine.\n以上是在读这本书的时候看到的一段。虽说讲的是如何成为一名程序员，但这样一段文字和我这些时间一直在考虑的问题很是有些关系，不知是碰巧还是其他的原因，让我读到上面这些。我想有必要抄译出来，也算是在思考绳索上打个结做记号：\n自我的孩子们出生之后，我便尽量安排出晚上的时间和他们一起度过。现在，我摸索出了最合适自己的工作节奏：先是一整个漫长的白天都在工作，然后在办公室或是就近睡觉(从我家到办公室距离很远)；接下来的那天我会及早结束工作回家陪孩子玩，一直到他们睡觉。我并不觉得这样的安排很舒服，但这已经是我在家庭和工作间能做到最好的权衡了。\n所以，如果你得了传染病，就回家去；如果你忙得想要自杀，就回家去；如果你累得想要杀人，就回家去。\n同样的，如果你的同事中有人呈现神经错乱或是一定程度上的精神问题，你也应该劝他/她回家。\n如果疲劳让你开始变得不诚实，开始试着隐瞒事实，那么你应该休息一会了。\n不要试图用可卡因或是安非他命来提神。\n不要滥用咖啡因。\n","description":"","id":65,"section":"posts","tags":null,"title":"从“如何成为一名程序员”看到的","uri":"http://justinyhuang.github.io/posts/e4bb8ee2809ce5a682e4bd95e68890e4b8bae4b880e5908de7a88be5ba8fe59198e2809de79c8be588b0e79a84/"},{"content":"“三”对中国人来说是个很重要的数字，三年纪念日也是我们婚姻生活的一个里程碑。\n用皮来定义结婚三周年，不知道“皮”对西方意味着什么，但我想这次周年没必要再像以往那样咬文嚼字了。\n让我觉得可以写也应该写下来的是这一年里我眼中妻子的改变。\n妻子开始研修煮妇之道，开始掌管家政大权，没有储蓄习惯的她也和我一起开始斤斤计较每个月是不是该再多存些钱。劳作时的她俨然看不到女孩的稚气，倒是有几分贤妻的样子。\n我也开始习惯了回家就洗澡吃饭，习惯了家里一尘不染，习惯了问她东西放在哪里。要感谢的是妻子把我废了，没有她我在家里会迷路。\n争吵的次数没有统计过，不过应该是创下新高。而且越细小的事越是能吵。以至最后也吵出了风格，吵出了模式。我猜想不吵架的男女和不生病的人一样是不健康的，相信妻子慢慢摸出了我什么时候会气急败坏，而我也自信她什么时候将要发点女人脾气。相对于隐忍退让者，她是主张大吵一通倾泻出来然后再沟通解决办法的人。\n这个纷繁迷乱的城市，随处都有贵族，放眼尽是奢华。最难能可贵的是妻子在这样的环境下仍能和我一起坚守自己理想的阵地。是她告诉我生活的本质，周末一人一碗热腾腾的泡面和我捧着吃；是她指出我的浮躁，点醒我距离目标还有很大差距；是她抚慰我的病痛，扮演妈妈顾我吃虑我穿；是她带给我更多的快乐，或是吃碗拉面或是做个蛋糕，大小节日哪怕周末都值得我们庆祝；也是她给予我家的温暖，离开公司我的条件反射就是回家，那里是我的暖窝我的乐土。\n结婚三年，其实真正的婚姻生活才算刚刚开始。\n现在对外一律宣称我们是老夫老妻，已经不是简单的调侃：\n三年的相对相处相扶，我也收获了我的老妻。\n","description":"","id":66,"section":"posts","tags":null,"title":"皮婚 - 我的老妻","uri":"http://justinyhuang.github.io/posts/e79aaee5a99a-e68891e79a84e88081e5a6bb/"},{"content":"人无远虑，必有近忧。\n字典说：人没有长远的考虑，一定会出现眼前的忧患。\n老二说：如果人没有办法去思考长远的计划，一定是一直被一些眼前的鸡毛琐事所扰。\n","description":"","id":67,"section":"posts","tags":null,"title":"老二说成语-人无远虑必有近忧","uri":"http://justinyhuang.github.io/posts/e88081e4ba8ce8afb4e68890e8afad-e4babae697a0e8bf9ce89991e5bf85e69c89e8bf91e5bfa7/"},{"content":"为什么年轻时候度日如年，而现今感觉刚过了一个礼拜，年关又到了？\n年近不惑的老二慢慢的坐下来和我说话。\n 你小时候都在做什么？\n 写作业，考试，玩\n 这样的事情在一年里要做多少次？\n 很多次\n 现在呢？\n 结婚，装修，找工作，有一本书怎么都没读完，哦奶奶问我什么时候生孩子……\n 可以了，这些一辈子能做几次？\n ……哦，谢谢！\n    ","description":"","id":68,"section":"posts","tags":null,"title":"老二的时间观","uri":"http://justinyhuang.github.io/posts/e88081e4ba8ce79a84e697b6e997b4e8a782/"},{"content":"同一个签名保留了两个月，愿死者安息，愿生者坚强。\n两个月里我们同样沉重地经历了逝去1年与逝去20年的天灾与人祸。\n不同的，可能是一些悲痛可以在广场上相互安慰，其他的一些只能自己默默祷告。\n没有能力控制地壳，也没有勇气阻挡机甲。\n唯希望偶尔的读者也与我一起祈愿死者安息，共勉生者坚强。\n","description":"","id":69,"section":"posts","tags":null,"title":"简单的悼念","uri":"http://justinyhuang.github.io/posts/e7ae80e58d95e79a84e682bce5bfb5/"},{"content":"五一起了个早，世界很清静。面对镜子刷牙时想：每个人的生命应该是个长方体吧。\n生命的长度是寿命，是对生命最直接的丈量；生命的宽度是这个人除去睡眠后清醒的时间，是生命体活力的量度；生命的高度是人在生命长度的某一个清醒的时刻活动的意义，体现了他/她生命的影响力。\n既然是有三维的长方体，所以生命的量词应该是：块。\n满嘴泡沫继续想象：或许有这样一块生命，很细很长。有人活到了长寿定义的时间，但是作为宽度的清醒时间不足。也没做些什么有意义的事。这块生命，更像是筷子，用“条”来形容更合适。\n又有一块生命几乎一天24小时都在忙碌，在有生之年做出卓越的贡献为人称道。他用饱和的宽度不断创造生命的新高度。只是天妒英才，早早离世，相比之下，长度太短。从生命的两端来看，他的一辈子，比较像是一堵很高很大却略显单薄的墙。\n可能还有很多块，保证了寿命，也不贪睡，但除了吃喝拉撒扯皮发呆以外似乎也没做什么有意思的事情。当最后闭眼的那一刻，也许他看到的是自己像一张纸的生命：很长、够宽，就是不够厚。\n而我的生命，又会是怎样？\n最好是能活得像一块大豆腐一样，有够长，有够宽，还挺高，嫩嫩水水的。\n再出门的时候，居然看到了街上高高矮矮胖胖瘦瘦的各色豆腐从我身边或快或慢的经过。\n我想我走火入魔了。\n","description":"","id":70,"section":"posts","tags":null,"title":"生命的三维","uri":"http://justinyhuang.github.io/posts/e7949fe591bde79a84e4b889e7bbb4/"},{"content":"春天又来了。\n窗角常春藤正绿，路边樱花正粉，还有到处放肆乱开的未名花正红正黄。\n“花儿真美丽啊～”\n“这花开得好鲜艳！”\n老二凑上去捧起一朵认真端详。\n“很性感……”老二赞叹道。\n","description":"","id":71,"section":"posts","tags":null,"title":"老二赏花","uri":"http://justinyhuang.github.io/posts/e88081e4ba8ce8b58fe88ab1/"},{"content":"按不折腾元年预告，2月进入了新的公司工作。\n原本以为只有自己，但是发现原先的同事中也有很多相同的感触：颇有些失落感…\nJessie说“失去才知道珍惜，离开才知道怀念”，和Sophia在班车上也不时说起以往的片段。幸运的是第一份工作能留下如此深刻难忘的忆记，遗憾的是过去的两年全部都变成了忆记。Roman回去以后也时常挂念这边的朋友，那天他说其实现在在Boise工作已经没有以前那样开心了，自己对着聊天窗口一时不知道应该敲些什么。最近的一次聚会在K歌房，大部分的时候只有背景音乐，大家都在聊天、问候，3个小时比以往任何时候都要过得快。\n然而过去是只能用来回忆的。\n工作第一周很有意思，跟着生产线上的工人师傅组装测试AFD（取款机上把钱从钱箱拿出来送到客户手上的装置）。接下来会有短暂的培训，这是一个能和机电结合很紧密的工作机会，希望自己能吸取以往的经验教训，改进学习方法和态度，掌握目标知识：\n  初步掌握AMR7的架构和ThreadX的机理\n  复习模板、设计模式和电路设计\n  学习算法导论前5章\n  开始Johnny5的设计实现\n  始终以毛主席老人家的话来勉励自己……\n ","description":"","id":72,"section":"posts","tags":null,"title":"新工作月末小记","uri":"http://justinyhuang.github.io/posts/e696b0e5b7a5e4bd9ce69c88e69cabe5b08fe8aeb0/"},{"content":"读了朋友关于爱情的“随记瞬间”，不是很懂。\n倒是想起了某个“瞬间”，也是，关于爱情：\n两人结合后卿卿我我常相厮守是最幸福的自不必说，那么最痛苦的呢？\n不是一方始乱终弃；不是感情不和无奈分手；也不是天妒鸳鸯让生死拆散爱侣。\n而是你真心挚爱的那个人，因为“适合生活有安全感”才选择与你终老。\n这样的痛苦是无法超越的，是持久绝望的。\n谁也不愿落到这般田地，然而世事如棋。更甚的是，你还不知道是谁坐在对面。\n","description":"","id":73,"section":"posts","tags":null,"title":"也是关于爱情","uri":"http://justinyhuang.github.io/posts/e4b99fe698afe585b3e4ba8ee788b1e68385/"},{"content":"In the past two months when I read a farewell letter, I felt sad because a friend left us.\nNow I am writing this mail and I know, today it turns to me.\nHP is where I start my career. You are who I have been working with in this company for 2 years.\nTo be honest, dedicated, tolerant and professional is what I have learned from the two years here. It is a great pleasure to work with you the talented, energetic and warmhearted engineers/managers. At the moment of writing all the memories come back to me that we were having fun on Fridays, that we saw an engine was smoking in the next cube, that we stayed up late testing and fixing duration issues, that we celebrated delivery of a new product. I will also treasure the time when we encouraged each other facing the announcements, when we shared all the information on job hunting and interview skills during the recession, when we laughed and cried in every party, when we feel happy at heart to know our friends are doing well in their new positions.\nThank you, for the precious skills and experiences that we learn, and for the laughter and tear that we share. This is definitely one of the best, if not the best, team in the world. I am proud to be part of it.\nAll good things come to an end. However, it is just another starting point for each of us. For those who have left or will leave, we shall pack up the HP way, with which we will lead a brand new life. For the rest staying in HP, please take care of yourselves and, the company, we have laid our dreams on you.\nThere will be one day that our pathes cross again. See you there!\nWish you all the best and\ntake care,\nJustin / Yang Huang\n第一次离职，留个纪念。\n","description":"","id":74,"section":"posts","tags":null,"title":"Farewell HP","uri":"http://justinyhuang.github.io/posts/farewell-hp/"},{"content":"1月 春节。百年难遇的14个节假日\n2月 新公司上班\n3月 培训\n4月 搬家\n5月 默哀\n6月 继续默哀\n7月 小彬填报志愿\n8月 待定\n9月 待定\n10月 60年庆大汇演\n11月 待定\n12月 皮婚\n","description":"","id":75,"section":"posts","tags":null,"title":"不折腾元年预告","uri":"http://justinyhuang.github.io/posts/e4b88de68a98e885bee58583e5b9b4e9a284e5918a/"},{"content":"每天都在地铁上偷窥美眉手中的时代报，今天看到一篇《上海市人大代表薄海豹提请地方立法禁止地铁行为艺术》。\ngoogle了一下这位戴表的同志，还是没搞清楚别人在地铁上扮演什么到底碍着他什么事了。回顾一下前段时间出现的超人、蛋人、高达、鹿人，还有莫干山路望不到头的涂鸦，陆家嘴地铁口坚持不懈的流浪歌手，心里很是为能生活在这样生机勃勃的城市而骄傲。依然生活在一个老人治国的社会，但透过这些充满想象力的头脑和简单幽默的眼睛，我们还是可以看到生活的那么一点趣味进而获得希望。为什么连这点权力都要被剥夺？这一年事情那么多，您老挑哪样管管申请立法不好？\n男女中学生送个苹果就被开了，上网查个史实就被拦了，过几天穿个带米老鼠头像的外套出门可能还违法了。\n还是软柿子比较好捏。好歹要提点什么，找个不痛不痒的地儿挠挠最合适。\n","description":"","id":76,"section":"posts","tags":null,"title":"软柿子好捏","uri":"http://justinyhuang.github.io/posts/e8bdafe69fbfe5ad90e5a5bde68d8f/"},{"content":"新年第一天，饶有兴致地看罢05、06、07年的总结。趁热打铁，赶紧的赶紧的把去年的所作所为记录一下。\n在08初我曾和妻子说：今年是闰年，一定有大事发生的。算我说中，虽然我倒宁愿没说中，去年的大事太多，多得没人能一口气说完。所幸的是这篇总结仅限于发生在我身上的事，所幸的是我在08之后还能有心情回忆，有双手打字，有命活着坐在家里写这些文字。\n房子买了。虽然对沪楼市贡献几乎为零，但于我于小家都是件顶了天的大事。回想当时为了房子，因为预算的问题就把我们从世纪公园排挤到中环到外环再到外环以外，为了能选一套好一些又便宜一些的房子不得不通宵排队，为了把房款付清贷完公积金再贷商业贷款再借钱，期房还没建好就兴致勃勃地爬到8楼去构想以后房间如何布置……有钱虽好，穷开心也不错，再偏远再差也算是自己的小窝了。\n婚宴摆了。迎娶新娘的时候，老婆刚出外家门还是没能忍住眼泪大哭了一把，这让旁观的我深感压力不小：以后俺也算是个一家之主。两方父母都很高兴：孩子的一件大事了了。周遭也尽是沉浸在觥筹交错和喜悦中。而我的心里，却是颇为复杂的说不出的感觉。\n工作换了。为公司卖了两年命，年底以被裁员结束。经济危机。想想自己还是很幸运：在一个充满活力和能量的团队里，见到了职场的林林总总，看到了技术的学海无涯。更重要的是亲历了如何坚持职业操守，如何坚持人生理想：在一个瞬息变化如08的世界里，若能够平心静气做自己应该做的事，走自己的路，是很不容易也很值得钦佩的事情。侥幸的是很快我还是找到了新的下家，而且可以在自己喜欢的技术领域继续工作学习。相比06年那漫长的猎职过程，这次重新找工作要相对顺利一些：能感觉到自己的成长是一件很让人欣慰的事情。\n叙事完毕，以下照例是致谢：\n感谢我的家人。爸妈已经不再年轻，奶奶身体也不如往常，弟弟懂事但仍未成年。虽然每周一次打回家的电话里并没有什么实质的内容，但仅仅是在电话上按下那熟悉的数字序列就已经让我感到温馨，问问天气就让我对家乡魂牵梦绕，每次简单重复的“要注意照顾身体”总也听不够。谢谢你们，在我或快乐或懦弱的时候给予我虽遥远却温暖的支援。\n感谢我的朋友。自己依旧是不太会处理人情世故，有你们作为朋友便更是显得弥足珍贵。食物中毒时是杨捷和秀婵姐在冰冷的凌晨赶来送我们去急诊；工作有困难时是同事们大方地给予我帮助；集体被裁时大家更是空前的共享就业信息。很感激，无论到哪里都有你们相伴。\n感谢我的老婆。这一年每一天都是你陪伴我度过。已经不能列举什么细节来谢谢你一路的包容、关爱和照顾。无论晴雨，无论日夜，是你让我知道总有一处时刻等着我回去，总有一人分秒关心我冷暖。是你给了我家的感觉，让我在前进时没有后顾之忧。希望以后的日子里，我们继续相辅度过。\n08的阴霾太过深重，隐约地，感到09也不会很好过。一年后再回望，希望自己能淡淡一笑且继续总结下去。\n","description":"","id":77,"section":"posts","tags":null,"title":"08总结","uri":"http://justinyhuang.github.io/posts/08e680bbe7bb93/"},{"content":"纸婚刚过去一年，而看似遥远的布婚纪念日却也转眼间变成一个月以前的事了。\n时间过得很快。\n试图google为什么第二个结婚纪念日以布象征，未果。看来这一天大都还是要用自己的语言来诠释。第一年，兴许新人几乎都一样，于是纸婚也都大同小异。往后的日子也许也就因有人坚持，有人离弃，有人有新发现，有人发觉乏味……而出现差异。\n回望自己的第二年婚姻，大体是粗茶淡饭，虽然时常也会与妻挑个纪念日来庆祝。感觉是：如果说新婚第一年时还会感慨自己竟然结婚了，那么又一年过后，婚姻已然饱满地渗进了我的整个生活。\n习惯了每天起床上班，家里让妻子打理。中午问问她午饭吃的是什么。下班前给她个电话说我今天可以准时到家。周末或去菜场买点下礼拜的菜，或到周围商圈转转看场电影，或就宅在家里上网看书。这倒也非常近似我在电影连续剧或是身边看到的家庭生活的流程。\n或许是因为一起生活互相观察，我与妻之间的默契似乎无人能敌了。一个眼神，一个语气，或是嘴角的一点抽动，都条件反射地让对方知道更多的内容。于是每次杀人游戏时，我们都能几乎百分百准确地说出对方的身份，让这个游戏变得很不好玩。\n与过往一年不同的倒是有一点，那就是因为在家里摆过了婚宴，在家里看来就算是真正的结婚了。同时也要开始称呼对方的父母为爸妈了，练习不够，每每在电话里叫“妈”的时候还是显得象初恋中的少女称呼男友为亲爱的那样羞涩，于是妻子每听见一次就爆笑一次。而这样的称呼，慢慢也将习惯的。\n难以习惯的怕是父母亲人越来越频繁的关于造人生个娃之类的催促。不断看到身边的俊郎娇妻一个个沦为父母，心想于我而言这个还是遥不可及。毕竟要孩子不象母鸡下蛋一样咕咕乱叫一通之后就可以拍屁股走人。我们的心智还不够成熟。试想一下一家三个全是小孩的场面，很让人不知所措。所以，“赶紧趁年轻早点要孩子吧”这样的轰炸还是会继续会遭到负隅顽抗很长时间。\n用了两年来成家，除去孩子的问题我想这个项目应该是算通过了吧。按祖上传下来的经验接下来就应该是立业，嗯。按部就班，很好。\n到了这里觉得可以用几句简短的话来准备收尾了。布婚留下的记忆是我们更适应了更有默契了，更懂得照顾彼此照顾家了。其他的部分，精彩的还是那样精彩，不和谐的依旧不和谐。\n写完忽然觉得这样一年写一次纪念的感觉很俗很老人，这样下去怕是皮婚丝婚木婚铁婚都不能偷懒了。可是，不写都写了，就这样吧。\n","description":"","id":78,"section":"posts","tags":null,"title":"布婚","uri":"http://justinyhuang.github.io/posts/e5b883e5a99a/"},{"content":"宁向冠希学英文 莫谈国事\n教训\n我们总是要身历、见血、舐伤、冥思才能得出先人早已告知的经验，而且乐此不疲\n亲人\n只有 他们 最 爱 你\n一些朋友\n已然殊途，但愿同归\n方文山说\n到不了的都叫做远方 回不去的名字叫家乡\n做自己\nWhen you have to make a decision, it\u0026rsquo;s not important whether you pick up the right, but how you choose your own.\n","description":"","id":79,"section":"posts","tags":null,"title":"杂想","uri":"http://justinyhuang.github.io/posts/e69d82e683b3/"},{"content":"05年底，在屯特Macandra小屋里隔着玻璃和薄雪看烟花，打开小音箱听TEARS OVER\nSHETLAND，整个晚上慢慢回顾，静静敲下那年的总结。\n06末，在上海某动迁房屋内吃完饭洗完碗，房东被迫换掉的空调庇护我不受冷风凛冽，毕业了，发论文了，工作了，领工资了。那晚，写总结如常。\n08年已经第三月，过去的07总结断断续续写了好久还没到结尾。\n去年还真是很忙，心想。 07年很忙碌。和老婆开始了婚后生活，在公司开始了职业生涯。三个月培训长了见识也附带长了10斤肉。去香港为新婚蜜月，往返南京为户口档案，到杭州为见昔日屯特帮子。每日奔走在公司和厨房卧室之间，房租猪肉粮油衣服车票还是那么无情又见缝插针的骗走我可怜的血汗钱。\n07年很忙乱。每一天脑子都转不过来。要学习的技术还太多，自己不能拿个空洞的文凭招摇一辈子；要了解的人情还太多，朋友亲人上司同事路人熟客间切换我想还是太乏力，自闭的我什么时候才能学会在正确的时候说正确的话作正确的事摆出正确的表情；要支付的生活还太多，在这个世界物欲漩涡的中心我一个人在战斗，只可惜似乎自己仍在慢慢的陷没，我没有，也不要被吞噬，可是我很无力；要实现的梦不多，反倒是萎缩得更少，剩下的幸存者依然还是那么遥远，每天在所谓的忙碌之后，看似自己也只有临睡前的几分钟留给那些冷藏了不知多少年的理想，更可悲的是几乎还没怎么开始想脑子就已经睡着了。 忙忙忙，忙得没有了原则。现在的我在做着自己曾经不屑的事，扮演着曾经不耻的角色。是否正如朋友说的就这样让生活磨去自己的血肉，还是继续把少年轻狂当成血气方刚？又或许我应该埋头十年，然后再像余杰一样发出铁屋中的呐喊？ 太过的忙往往不是什么好事情。周边的亲友都不时提醒自己要放慢脚步，有张有弛。现在看来是很有必要的。在水里一味的埋头屏气直冲，总有狠狠碰壁或是迷失方向的时候。成功学教人每天腾出一小时让自己放空，什么也不干，或许就是这个道理。 感觉似乎每年总结后都会对来年有所希冀，可是现在除了拜托老板不拘一格涨工资外一时还想不出第二个愿望来。确切地，与其说想不出，还不如说不敢想。 打了那么多的字，大部分还是只有自己看得明白，以此为戒，以此自勉。 那天和老婆说我2000年开始每四年就要有转变，二零零八的到来，我弱弱的提个要求：要不让俺再重生一次？\n","description":"","id":80,"section":"posts","tags":null,"title":"07年总结","uri":"http://justinyhuang.github.io/posts/07e5b9b4e680bbe7bb93/"},{"content":"写给2007年12月4日\n时间过得很快，日出日落间就有那么一天老婆问：是不是应该给我们的纸婚写些什么了？\n我确也很有写点东西的冲动，因为就是这奔流而去的一年隔断了我和我的未婚生活。结婚自然就是结束未婚，这看似废话的结论其实包含了很多。唯有经过，才会看到沿途的风景，才能体会一路的跋涉。\n拥有了纸婚，第一个感觉，不过更像是错觉，就是自己和银婚金婚钻石婚一族是一类的了。一下子我竟然老了那么多！赶紧提醒自己还没到三十岁，二字打头的怎么也要算青年的。呸呸呸。\n为什么第一个结婚纪念日要用纸来象征？\n戴上婚戒一周年，回顾2007，才发现我们的感情竟也被磨得像纸一样薄，像纸一样白。性格的差异，生活的琐碎，习惯爱好的不同，思维方式和追求的分歧都纷纷向我们的感情伸手。我们的争执多了，我们的交流少了。你的泪水和我的无语在把我们拉得越来越远。我们的爱，积累了两年，耗费了一年。\n原来婚姻，和恋爱是两个没有关联的事物。\n一年来我们走得跌跌撞撞，伤痕累累。所幸，在一年的驿站稍息间我们看到来时歪歪曲曲的足迹；所幸，我们开始学习婚姻的经营方式；所幸，感情还在爱还在，我们还在一点一点填补空创。\n谢谢老婆，谢谢你为了照顾我的作息提前上床，尽管很多时候你都睡不着，尽管你要服用那些你说很有效的Melatonin。谢谢你在早上起来为我做各式早餐，虽然你还是喜欢睡懒觉喜欢赖床，虽然是在只有5、6度的冰冷的清晨。\n谢谢老婆，谢谢你为了迎合我的节俭控制自己的开销。不止一次你在看到自己喜欢的东西时再三考虑，不断割舍。谢谢你对我的信任和认同。\n谢谢老婆，谢谢你不断的挖掘我们兴趣爱好的共同点。谢谢你努力克制自己的脾气，我深知江山易改本性难移，我更知道你为我改变了许多许多。\n谢谢老婆，谢谢你的用心谢谢你的爱。\n所谓坠入爱河应该是一种本能、一种冲动、一种需要、一种情不自禁。\n所谓共筑爱巢应该是一种责任、一种坚持、一种选择、一种同甘共苦。\n我们跨越婚姻的大河已经一年。已经不是在爱河中放肆嬉戏，无拘无束的时候。既然选择在婚姻登岸，就要开始在坎坷的陆上搭建自己的爱巢。我们会有摩擦，我们会被阻碍，我们会被伤害，但只要为爱坚持为家努力，小家终会竣工，我们也将有个可避风雨的温暖港湾。\n薄纸薄，薄得可以折成各种形状。白纸白，白才能够涂写任何图案。\n我想，这应该就是纸婚的含义所在吧。希望我们以纸为戒，以纸为励。\n","description":"","id":81,"section":"posts","tags":null,"title":"纸婚","uri":"http://justinyhuang.github.io/posts/e7bab8e5a99a/"},{"content":"二十一世纪，啥最贵？人才已经不贵了，满街的人才不都找不到工作吗，满公司的人才不都像狗一样奔命吗；房子车子也不算贵了，猪肉青菜方便面都通通升值了，那人家一平卖个两三万也不过分了。\n二十一世纪，老婆最贵。\n为了找老婆，你得花钱打扮吧，不然男女比例差那么远，亿把人里要看到你还不知道要轮到哪辈子了；你得请人家女孩子吃饭逛街看电影吧，公园现在是给老人打拳和小狗散步的地方；你得隔三差五送点礼物吧，要不怎么体现你的真爱？\n好了，老婆找到了，得赶紧娶。所以你要买房子，要不爱的小屋搭哪呢；所以你要买车子，不然小偷色狼会在公车地铁对老婆下毒手，满街的灰尘更会侵蚀老婆娇嫩的面庞；最重要的是钻戒，你想人都嫁给你了买颗石头你都不舍得，也太没人性了，更有女性专家定下通行标准，钻戒不能低于老公三个月的收入，所以这个要求还是不过分的。\n老婆娶了，但是绝对不能让对老婆的爱降温，于是后续投资也是必须的。为什么人家的老婆有LV你老婆没有？为什么别人老婆有步入式衣柜而你的老婆却要和你把衣服塞在一起？为什么老婆和朋友聚会讨论化妆品时只能谈谈黄瓜的好处？好了别说那么多了，先想想为什么你会有那么多的为什么？\n当然老婆的价值还远不止这些，如果哪一天你把国策抛到脑后，和老婆努力合作制造新人类成功，那么老婆及新产品势必又将掀起一场腥风血雨的革命……\n二十一世纪，啥最贵？\n注：为本人安全着想，请勿留言询问俺老婆的情况，请勿对号入座。切记！\n ","description":"","id":82,"section":"posts","tags":null,"title":"新世纪啥最贵","uri":"http://justinyhuang.github.io/posts/e696b0e4b896e7baaae595a5e69c80e8b4b5/"},{"content":"我们39个月相识纪念日刚过去，今天即是私自订婚25个月纪念日，随后9个月结婚纪念日也要到来。\n爱情是毒药、婚姻是围城。呵呵我们一日中毒再也无可救药，关上城门也便安营扎寨。\n今天还是给你戴上婚戒一周纪念日。\n简单的光环、永恒的Tiffany。正如这纯净的相爱，坚定的相守。\n鲜少有在这里写些什么给我的她，给我带来每个纪念日的雯。\n请握紧我的手，每天都是纪念日。\n","description":"","id":83,"section":"posts","tags":null,"title":"纪念日","uri":"http://justinyhuang.github.io/posts/e7baaae5bfb5e697a5/"},{"content":" 都说天网恢恢疏而不漏。\n其实漏网之鱼总是有的，只是没有一条会傻到跳出来大喊“嘿，你瞧我这不就漏啦”。\n都说纸包不住火。\n其实包住火的纸还是有的，只是太严实了，从来没人知道里头有啥。\n都说成功者都是偏执狂。\n其实那些头脑正常的成功了也无法炒作起来，而一堆因偏执而惨死的却又无人知晓。\n都说他事业有成家庭温馨得风顺水。\n其实黑夜在厕所里的眼泪已被习惯性地顺手冲进了下水道。\n 生活有趣也许就在于此。当电影连续剧中的情节真实上演于眼前时，到底戏剧化和生活化有什么区别？我笑了。\n生命无色，命运多彩。还是有道理的。\n","description":"","id":84,"section":"posts","tags":null,"title":"都说","uri":"http://justinyhuang.github.io/posts/e983bde8afb4/"},{"content":"在一些时候我应该很笨很笨，笨且固执。\n在一些时候我应该稍微开窍些，知错就改。\n在一些时候我应该小心谨慎，脚踏实地。\n在一些时候我应该做好计划缜密分析，前瞻远眺。\n在一些时候我应该看破屏障，反常规，走出框框。\n问题是，我不知道在什么时候选择哪个选项。\n更糟的是，时不时的我还不愿意去选择那些看来是正确的。\n这时候我开始慢慢理解为什么会有受过良好教育的小偷，为什么会有道德败坏的教授；或者为什么会有恍然悔悟的惯犯，为什么会有决定从良的妓女。\n他们都只是做了一些不同的选择而已。\n","description":"","id":85,"section":"posts","tags":null,"title":"没有题目","uri":"http://justinyhuang.github.io/posts/e6b2a1e69c89e9a298e79bae/"},{"content":"那天看到创创哥哥的签名：人生不过是死前的游戏，好好享受吧。\n愈念愈有意思。\n游戏有无数玩法，一辈子也可以选择不同角色去度过。\n有人沉迷DIABLO，就有人固执于唯书中才有黄金万两。有人非得踩遍RPG中所有地雷，就有人乐于尝试各种挑战。有人面对魔兽英雄技法应对自如，就有了我们的老板和老板的老板。有人对所有游戏都浅尝即止，就有了我这样对啥都感兴趣又什么都不懂的白痴。\n人生是真实的游戏。通向考试100分的途径有努力学习，技术好的话可以试试作弊；要泡到妞，除非你拿到的主人翁又帅又有钱，否则就要老老实实努力赚魅力值；如果想看看监狱里有什么，你需要先去烧杀抢掠，至少偷点东西。受不了漫长的等待和怎么打都打不死的怪物？那么你能拿到的宝物可能就不怎么值钱。要想继续玩更长时间，一直通关看到绚丽的动画？那你不能以各种形式自杀或是让别人摆平你。想有阻击枪的精准又不愿放弃机枪的速度和子弹容量？要么你可以牛B到修改整个游戏要么就去一边努力睡觉争取能梦到。\n人生不过是死前的游戏。通关后一切OVER，无论你有没有成功地完成小狗变飞龙，是否意外的获得3000000金币，见没见过隐藏的漂亮MM。在通关前你可以尽你想象去发挥，去尝试，去游历，玩出自己的风格。否则，不用说你自己，就连旁观游戏的陌生人都会觉得乏味：我们要看的是游戏，而不是公式。\n自有意识后便开始了游戏的第一关。可惜的是前面的关里都太保守，从每关开始就直接奔向出口。任务是都完成了，时间也许也足够短，但漏掉了太多的暗门，错过了无数的隐藏角色，自然bonus也就较高手而言少。试想如果超级玛丽一路狂奔30秒就跳到旗杆上，游戏也没有什么意思了。而我似乎仿佛就是这样过的关，没有踩过怪物，没有吃过蘑菇，没有钻过地井，更没爬着神奇的藤条上过摆满无数金币的天堂。一路除了奔跑，就是大步跳。玩过了？是的。好玩不？没意思。当然，最短时间内完成关卡也是一种玩法，就像每天规矩精确的耗掉时间也是一种存活方法一样。不过，我该换换口味了。比如说……在还有三条命的时候去壮烈的死一次？\n所幸我还没到面对最后一关大怪的时候，还有机会试试不同的玩法。\n","description":"","id":86,"section":"posts","tags":null,"title":"人生如戏","uri":"http://justinyhuang.github.io/posts/e4babae7949fe5a682e6888f/"},{"content":"2006年悄悄地结束，就在两分钟前洗澡的时候才知道07已经开始。照例，年度总结。\n06夏天告别了Twente，离开了荷兰，结束了自己的学生生涯。一点点遗憾、一点点壮烈，回家了。还算满意，两年来自己给自己打85分。虽然，每次收到UT的校友杂志还是有那么一丝复杂的感觉：还是半懂不懂的荷兰文，却只能隔着厚厚的铜版纸去触摸电子楼前栏杆的铁锈了。\n秋天，发了处女论文，也算了了一个心愿。12年后重游兰州，不同的是：只有自己一个人，登台不再是讲故事，出门前要花时间刮胡子。俺们家的学术氛围有些让人难过，少了几分纯粹，只好用些棉花杂物之类的来填填补补。兰州之行得分65。\n冬天，历时4个月，给自己找到了第一份工作。经历了迷茫、自信、再迷茫、再自信、再迷茫的如此反复，相信自己也因此成长了一些。所谓海龟海带海狮的帽子太多太重，得失是自己的，也只有自己才能把握。90分评给工作寻猎历程。\n对网络、电脑明显依赖过多，竟有几次在看电视中途上厕所前想要按暂停，看到精彩镜头找鼠标要倒退。静下心读书，似乎只能到上世纪去回忆了。\n过了本命年毕竟长大了许多，06的自己变聪明了，变邪恶了，变短视了，变稳重了，变得成熟了一点，变得下流了一些。总之，变了，也许无法回去，未必不是好事。\n生活也骤然变短变小：\n没了计划，每天醒来思考的第一件事是到底今天是不是工作日；\n没了理想，工资和房子充斥着我的七窍，不想要这样的生活，却不得不这样活着；\n没了动力，那天看到一则黄色笑话：男人感到无助的时候就找个安静的地方坐下来想想自己的小弟弟：能缩能伸，能大能小，能长能短，能冷能热，它尚且如此，面对困难我们怕什么。看完后竟然觉得很有道理……\n06终于还是和老婆重逢了，时隔两年继续我们的故事，大家都说不容易。有她鼓励我做好毕设有她陪伴我完成论文有她建议我的找工作，有她用心，很感激。\n生活压力渐渐浮出水面，户口还是居住证、打工还是创业、租房还是买房、存钱还是花钱、女友还是老婆、睡觉还是看书、游戏还是思考、虚假还是真诚、生活还是生存、活着还是死去……\n2006，愿望达成了、梦想生病了、世界现实了、眼睛模糊了。\n总结完毕。\n","description":"","id":87,"section":"posts","tags":null,"title":"06总结","uri":"http://justinyhuang.github.io/posts/06e680bbe7bb93/"},{"content":" 睡觉睡到自然醒取钱取到手抽筋的生活，下周终于可以结束。取而代之的是打工者的身份开始日复一日的简单且劳累的24小时。\n后者没什么好庆祝的，而前者却也不至于留恋。\n 从八月初到今天，四个月来投过简历无数，面试磨出老茧几张，不止一次的想等我结束这猎寻工作的日子一定要列出一张公司红白黑名单来，算是求职记录。可转念一想这又有比较攀比的嫌疑，也就作罢。只记下个数字，有后来的同志也可以做一统计：\n 简历投出无数份，挨边不挨边的都投了，期间版本有过若干修改升级，最终版本号应为Resume v2.xx\n 面试8次，平均每月2次。二面、电面等不列入其中。\n 被鄙视2次，被严重鄙视1次。这样的面试就是镜子、模拟考、探路石，每次都是绝佳的学习机会，在被鄙视时要从内心发出微笑，感谢考官指出自己的不足。从中看出自己实践经验还是欠缺，被挑剔的都是因为技术问题，要么是自己确实不知道，要么是复习不到位。庆幸的是人品不错，智商不低，没有在这些项目上被藐视的，自大一个先。\n 临阵脱逃1次，公司距离太远，且临时改动面试时间，为了给应聘者争口气，我放了它的鸽子。\n 鄙视公司3次，因为在接到录用通知后发现更适合自己的婆家。我对自己的每一个第一次都颇为珍惜，想想还是要找个真心相爱的公司来处处。\n 接受公司1次，到了最后一是因为自己确实也找了太久，再不赶紧嫁出去恐怕要死守处子身终老了；二是这婆家对一个刚毕业的“嫩脚”也已经挺好，再不动心怕被良心谴责，还是速速许了吧。\n 致谢依然是必须的。感谢老婆大人，在我失落的时候鼓舞我，在我忘形的时候教育我，在我迷失的时候指点我，在我病痛的时候照顾我。我会努力，让你幸福。感谢老爸老妈奶奶叔叔婶婶姑姑，虽然你们很关切我的情况，巴不得每天都问我有什么消息，但又害怕影响我的心情。这些我都牢记在心，我会争气，报答你们的亲情。感谢无法说出的朋友，你为我介绍工作，陪我聊天，给我祝福，替我加油。现在还不能用什么来感谢你，但希望有一天我也能圆了你的哪个愿望。\n 而2006的任务也算挨着年关完成了，总算可以给自己一个交待。气是不敢松的，生命就像是个不断外扩的圆形螺旋，完成一圈后，等待自己是接下来更大的圆。至于做了些什么，那是年底总结的内容，还是别写，留点事给自己在别人放炮仗的时候做。\n","description":"","id":88,"section":"posts","tags":null,"title":"开始吧","uri":"http://justinyhuang.github.io/posts/e5bc80e5a78be590a7/"},{"content":"醒来发现，还没死。于是起床，于是洗漱，于是买菜，于是继续找工作。\n离开了大学，生活这个叫×××的难过。\n白天，睁开眼睛看到窗外已经熙熙攘攘。人们都在四处乱窜，有些蒙，也不知是扬起的灰尘还是昨天的眼屎。夜里，都市尘埃还未落定，我已经上了床。也怪不得我看东西总是不清楚，总是灰蒙蒙的。\n嗯，事实与理想是有差距的，和梦想是不沾边的。\n嗯，生存下去才能生活，衣食饱而知荣辱。\n嗯，别洗头，厚着头皮死赖着。祖宗白日托梦于我：有志者事竟成，破釜沉舟，百二秦关终归楚；苦心人天不负，卧薪尝胆，三千越甲可吞吴。\n嗯，我还没死，呼吸自然。做个记号，别把我埋咯。\n","description":"","id":89,"section":"posts","tags":null,"title":"睡醒了，还没死","uri":"http://justinyhuang.github.io/posts/e79da1e98692e4ba86efbc8ce8bf98e6b2a1e6adbb/"},{"content":"一个半小时：哥本哈根\n十一个半小时：上海\n三个小时：海口\n回家了。\n找不到什么激动，收藏好一点点的失落。灰沉的四角积木一般的楼房往身后慢慢的挪动。从机场看到市区，愣愣的，我想看到些什么，又什么都看不到。身边的人儿也在那么一天变得好陌生，祖国的改革开放让我想鞭尸我们的总设计师。于是我想用眼泪洗刷这些天的厚重尘埃，可是没有用，灰不在我的眼睛上。\n就像一个禽流感病人，我被隔离在一个只有一张苍白床单铺盖铁床的四角空穴般的水泥房间里，扶着生锈的窗口，羡慕的看路上活奔乱跳的人们来来往往。嗯，我是无法那样的，我是个重病的异类。不过我想我还是可以在哪天把病治好，然后可以像他们一样在外面如鬼魅般尖叫乱跳享受生活。\n躺在熟悉而陌生的木床上，觉得天花板少了些什么。我知道，是Macandra的那盏破纸糊的灯。\n","description":"","id":90,"section":"posts","tags":null,"title":"回家","uri":"http://justinyhuang.github.io/posts/e59b9ee5aeb6/"},{"content":"七月四日，美国独立了，我毕业了。\n多谢我的朋友们，没有你们的帮助我都还不知道会乱成什么样。\n多谢Erik，多谢Marcel，多谢Matthijs，我知道你们看不懂我写的是什么，但还是要谢谢你们在这短不短长不长的毕设里给我那么多的帮助。\n多谢天思美女，多谢硕硕才子，没有你们给我摄像我的父母就无法看到我的答辩，祝你们一切顺心、愉快。\n多谢Eva，多谢Pantlis，你们遥远的祝福在我最需要鼓励的时候感到朋友的关怀和温暖，哪怕是在32度的荷兰。\n多谢Tavi，多谢程哥，你们的西装和皮鞋让我好歹有个人样站在讲台上。谢谢你们。\n多谢黎叔、茹婶，多谢大米、张晓，多谢赵一平、谢老师，多谢洋哥，多谢你们出席我最后一次答辩。对你们来说也许只是短短50分钟，对我却是一辈子的记忆：在一个人站在讲台上的时候，我看到有你们支持我。\n多谢那些这里我无法列名道谢的朋友们。我不擅言谈，只有心存感激，谢谢你们。\n多谢我的父母，在我慌乱的时候，他们让我沉稳；在我脆弱的时候，他们给我温暖；在我想家的时候，他们说快快回来我们也很想你；在我设计有困难的时候，他们说别急慢慢做回家可以晚些学习重要。爸爸、妈妈，谢谢你们。\n多谢我的女友雯，不是每个女生都能为我等上两年，也不是每个女生都值得我等上两年。两年磨练和考验只是开始，希望我们一起经历以后的日子，一起品味未来的生活。谢谢你给我的信任，谢谢你的爱。\n写着写着就下起了小雨。天气热了那么久，雨水浸透草地的味道就像忙碌过后的片刻轻松。而这样毫无规律时大时小下了两年的雨，也许再也不会淋在我的身上。\n从国内过来的时候有想过要带点砂土。现在要回去了，是不是要带瓶雨水，或是牛奶面包奶酪意大利面郁金香花风车模型成人玩具木鞋明信片什么的？其实，真不舍得。\n总结性的东西不能在这里写，要给写年度总结留材料，而且，自己还有尚未完成的工作。\n","description":"","id":91,"section":"posts","tags":null,"title":"毕业了……","uri":"http://justinyhuang.github.io/posts/e6af95e4b89ae4ba86e280a6e280a6/"},{"content":"老二三十好几，为人忠厚。\n媳妇说老二啊现在都什么时代了，讲的是男女平等，你说凭什么你能做的我不能做？\n老二想了想\n对，对，男女是要平等的。\n媳妇说老二啊你还是不是男人了，你的责任心使命感呢？怎么能让自己老婆做这个？\n老二想了想\n对，对，男人是要负责任挑重担的。\n……\n老二想了想\n……\n不对啊！\n","description":"","id":92,"section":"posts","tags":null,"title":"老二想不通的事","uri":"http://justinyhuang.github.io/posts/e88081e4ba8ce683b3e4b88de9809ae79a84e4ba8b/"},{"content":"人不是随着时间的推移，而是由经历的堆积，而慢慢长大的。\n这里面有些让我们继续憧憬期待，时而感谢时而激动。\n比如一次小小的进步，一个发自内心的微笑；\n比如一次紧紧的拥抱，一个寄寓深情的礼物；\n比如面对大海；\n比如浸泡在黑暗却温暖的小屋里轻轻放着DayDream的钢琴。\n还有一些让我们感受到撞击，意识到渺小无力，抑或转过头去才在唇边尝到无声的泪。\n比如时间的荒置，距离的长度；\n比如亲友的离去，人情的冷落；\n比如梦想输给了生活；\n比如某天在卫生间照镜子；\n比如，听到母亲苍老的声音在耳边抽泣。\n谁在我们的脸上刻下皱痕，是时间还是我们自己？\n","description":"","id":93,"section":"posts","tags":null,"title":"一些事","uri":"http://justinyhuang.github.io/posts/e4b880e4ba9be4ba8b/"},{"content":"两个正在等待重生的灵魂偶遇。\n“今天有个好消息”\n“哦？”\n“我就要去做鸟，以后就可以过自由自在的日子了”\n“恭喜啊，你命真好！”\n“呵呵，好什么呀，其实做鸟也很惨的，整天飞来飞去风吹雨打就不说了，吃的都是些什么恶心的虫子，还要担心会不会被人打下来然后拔毛吃掉……”\n“……”\n","description":"","id":94,"section":"posts","tags":null,"title":"虚伪的灵魂","uri":"http://justinyhuang.github.io/posts/e8999ae4bcaae79a84e781b5e9ad82/"},{"content":"忽然间很忙起来。\n设计有了进展，但是问题多多，于是想法多多。终于切身领悟成功人士的睡眠时间不会超过7小时：看来我接近所谓的成功人士了——至少我想不能再赖床了。转眼看看那张床，我为今天1个小时毫无意义的半睡眠状态感到无比的痛心和羞耻……\n想看的书越来越多。叶婷发来的《狼图腾》一页都没动；被硕硕感动而重新认真再读的《红楼梦》也只进展到爱死应莲的痴情男被乱棒打死——为什么我不会想要知道后面的结果？原来自己是那么冷血和无趣的一个人；前天老婆推荐的网络文章更是看到一半就想睡觉，老婆啊，我的眼皮好重……而那些收藏起来的Linux Device Driver, Linux Kernel Programming Guide还有新近搜刮来的Design Pattern……\n没有书的时候拼命找书，然后就是拼命找最好的阅读软件，然后又是拼命找书……忽然我觉得自己就是周星驰时代的唐伯虎，四处游历寻遍绝世女子，娶回家后看到那么多的老婆，想想还是出去再找一个。没时间看书的人不是忙而是太肤浅。于是我想也睁大眼睛自拍一张黑白照片——《我想读书》！\n然后就是网络日记。上苍晓得我是多么的想维护好我的这两个blog啊……可是现在才感叹自己也难免流于乡俗：伪文学青年们和伪小资们敲锣打鼓放鞭炮一个个建起自己的blog、space、zone，然后又因为没钱买墨水写不了文章而搁置，某日心血来潮想看看有没有人给自己留言时才发现因为没有更新自己的网络日记（月记？年记？）已经被供应商受走了……\n嗯，忽然间很忙起来了。写完了还要去买菜，不然没米下锅了。\n","description":"","id":95,"section":"posts","tags":null,"title":"忽然间很忙……","uri":"http://justinyhuang.github.io/posts/e5bfbde784b6e997b4e5be88e5bf99e280a6e280a6/"},{"content":"寂寞是整个晚上必须要开着音箱放电影或是音乐或是广播，否则会被自己的呼吸声吓到\n寂寞是一个人在除夕坐在暖气管营造的温暖房间里，看没有礼花照亮也没有炮竹吵闹的黑漆漆的天\n寂寞是吃完晚饭后看着围在身边的酒瓶、油腻腻的碟子和剩菜，然后它们都开始晃动起来\n寂寞是坐在马桶上的时候和对面墙的瓷砖对话，然后不惜多冲几次水也要把那张可恶的纸送到不知名的地方去\n寂寞是你终于找到一个人说伤心的事却没办法让她知道这有多让人难过\n寂寞是最无聊的事是最无奈的状态是想了老半天只能靠敲键盘来等待睡觉的时间到来\nOK，可以睡了\n","description":"","id":96,"section":"posts","tags":null,"title":"寂寞","uri":"http://justinyhuang.github.io/posts/e5af82e5af9e/"},{"content":"一个人在地球另一边看月亮已经一年有余，再次呆坐在小屋里望着窗外欢快的烟火，感叹生命不过如此。\n发现自己越发的迟钝，说i don\u0026rsquo;t know的次数也越来越多，而以后，也越来越模糊。爱因斯坦说认知的圆越大未知的周长就越长，希望这不是自我安慰。\n人生的意义是什么？老掉牙，而且只有迷茫失败无聊的人才会问的问题。正在enjoy每一天的人儿此刻在开香槟。只有失败到有空余时间的人才会去考虑所谓的人生意义。\n但悲观也未必不是好事。\n在一个干旱的小村落，能挖井并发现水源的人就是牛人。他们颇受欢迎甚至可以得到顶礼膜拜。这就是为什么几乎所有的人都在挖井不断寻找水源。找到了水源就找到了一切，大家都会亲近这个能分给自己一钵水的神。村落里有发现水源却独占而不分享的，有四处张望以期获得施舍的，也有乐善好施一天之内就消耗掉一口井的——有了挖井的本领，分点水给你又如何？\n重要的是能挖出有水的井，而不是能喝上水。至于在挖井之初就围坐在工地旁边的几近干涸的眼神，或许能给挖井者一些救世主的感觉。\n江山易改本性难移。难而已，不是不可以。余世维说习惯左右命运，气度决定格局。改吧！\n爱是无穷。珍惜所有，及时回报。\n睡觉起来后，继续充实自己，这样明年可以写总结时就可以爽一点……\n","description":"","id":97,"section":"posts","tags":null,"title":"又是一年","uri":"http://justinyhuang.github.io/posts/e58f88e698afe4b880e5b9b4/"}]